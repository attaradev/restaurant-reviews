class DBHelper{static get DATABASE_URL(){return"https://mwsres.herokuapp.com/"}static get RESTAURANTS_URL(){return`${this.DATABASE_URL}restaurants/`}static dbPromise(){return idb.open("db",2,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant","restaurant_id")}})}static fetchRestaurants(){return this.dbPromise().then(e=>{return e.transaction("restaurants").objectStore("restaurants").getAll()}).then(e=>0!==e.length?Promise.resolve(e):this.fetchAndCacheRestaurants())}static fetchAndCacheRestaurants(){return fetch(DBHelper.RESTAURANTS_URL).then(e=>e.json()).then(e=>this.dbPromise().then(t=>{const r=t.transaction("restaurants","readwrite"),a=r.objectStore("restaurants");return e.forEach(e=>a.put(e)),r.complete.then(()=>Promise.resolve(e))}))}static fetchRestaurantById(e){return DBHelper.fetchRestaurants().then(t=>t.find(t=>t.id===e))}static fetchRestaurantByCuisine(e){return DBHelper.fetchRestaurants().then(t=>t.filter(t=>t.cuisine_type===e))}static fetchRestaurantByNeighborhood(e){return DBHelper.fetchRestaurants().then(t=>t.filter(t=>t.neighborhood===e))}static fetchRestaurantByCuisineAndNeighborhood(e,t){return DBHelper.fetchRestaurants().then(r=>{let a=r;return"all"!==e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!==t&&(a=a.filter(e=>e.neighborhood==t)),a})}static fetchNeighborhoods(e){return DBHelper.fetchRestaurants().then(e=>{const t=e.map((t,r)=>e[r].neighborhood);return t.filter((e,r)=>t.indexOf(e)==r)})}static fetchCuisines(){return DBHelper.fetchRestaurants().then(e=>{const t=e.map((t,r)=>e[r].cuisine_type);return t.filter((e,r)=>t.indexOf(e)==r)})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return void 0===e.photograph?`/img/${e.id}.jpg`:`/img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return r.addTo(t),r}static addReview(e){let t={name:"addReview",data:e,object_type:"review"};if(!navigator.onLine&&"addReview"===t.name)return void DBHelper.sendDataWhenOnline(t);let r={name:e.name,rating:parseInt(e.rating),comments:e.comments,restaurant_id:parseInt(e.restaurant_id)};console.log("Sending review: ",r);var a={method:"POST",body:JSON.stringify(r),headers:new Headers({"Content-Type":"application/json"})};fetch("http://localhost:1337/reviews",a).then(e=>{const t=e.headers.get("content-type");return t&&-1!==t.indexOf("application/json")?e.json():"API call successfull"}).then(e=>{console.log("Fetch successful!")}).catch(e=>console.log("error:",e))}static sendDataWhenOnline(e){console.log("Offline OBJ",e),localStorage.setItem("data",JSON.stringify(e.data)),console.log(`Local Storage: ${e.object_type} stored`),window.addEventListener("online",t=>{console.log("Browser: Online again!");let r=JSON.parse(localStorage.getItem("data"));console.log("updating and cleaning ui"),[...document.querySelectorAll(".reviews_offline")].forEach(e=>{e.classList.remove("reviews_offline"),e.querySelector(".offline_label").remove()}),null!==r&&(console.log(r),"addReview"===e.name&&DBHelper.addReview(e.data),console.log("LocalState: data sent to api"),localStorage.removeItem("data"),console.log(`Local Storage: ${e.object_type} removed`))})}static changeFavIconClass(e,t){t?(e.classList.remove("favorite_no"),e.classList.add("favorite_yes"),e.setAttribute("aria-label","Remove as a favorite")):(e.classList.remove("favorite_yes"),e.classList.add("favorite_no"),e.setAttribute("aria-label","Mark as a favorite"))}static updateFavouriteStatus(e,t){fetch(`${this.RESTAURANTS_URL}${e}/?is_favorite=${t}`,{method:"PUT"}).then(()=>{this.dbPromise().then(r=>{const a=r.transaction("restaurants","readwrite").objectStore("restaurants");a.get(e).then(e=>{e.is_favorite=t,a.put(e)})})})}static storeInIndexedDB(e,t){this.dbPromise.then(r=>{if(!r)return;const a=r.transaction(e,"readwrite").objectStore(e);Array.isArray(t)?t.forEach(e=>{a.put(e)}):a.put(t)})}static getStoredObjectById(e,t,r){return this.dbPromise().then(a=>{if(!a)return;return a.transaction(e).objectStore(e).index(t).getAll(r)})}static fetchReviewsByRestId(e){return fetch(`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${e}`).then(e=>e.json()).then(e=>(this.dbPromise().then(t=>{if(!t)return;const r=t.transaction("reviews","readwrite").objectStore("reviews");Array.isArray(e)?e.forEach(e=>{r.put(e)}):r.put(e)}),Promise.resolve(e))).catch(t=>DBHelper.getStoredObjectById("reviews","restaurant",e).then(e=>Promise.resolve(e)))}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRiaGVscGVyLm1pbi5qcyJdLCJuYW1lcyI6WyJEQkhlbHBlciIsIkRBVEFCQVNFX1VSTCIsIlJFU1RBVVJBTlRTX1VSTCIsInRoaXMiLCJbb2JqZWN0IE9iamVjdF0iLCJpZGIiLCJvcGVuIiwidXBncmFkZURiIiwib2xkVmVyc2lvbiIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsImNyZWF0ZUluZGV4IiwiZGJQcm9taXNlIiwidGhlbiIsImRiIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsImdldEFsbCIsInJlc3RhdXJhbnRzIiwibGVuZ3RoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJmZXRjaEFuZENhY2hlUmVzdGF1cmFudHMiLCJmZXRjaCIsInJlc3BvbnNlIiwianNvbiIsInR4IiwicmVzdGF1cmFudFN0b3JlIiwiZm9yRWFjaCIsInJlc3RhdXJhbnQiLCJwdXQiLCJjb21wbGV0ZSIsImlkIiwiZmV0Y2hSZXN0YXVyYW50cyIsImZpbmQiLCJyIiwiY3Vpc2luZSIsImZpbHRlciIsImN1aXNpbmVfdHlwZSIsIm5laWdoYm9yaG9vZCIsInJlc3VsdHMiLCJjYWxsYmFjayIsIm5laWdoYm9yaG9vZHMiLCJtYXAiLCJ2IiwiaSIsImluZGV4T2YiLCJjdWlzaW5lcyIsInVuZGVmaW5lZCIsInBob3RvZ3JhcGgiLCJtYXJrZXIiLCJMIiwibGF0bG5nIiwibGF0IiwibG5nIiwidGl0bGUiLCJuYW1lIiwiYWx0IiwidXJsIiwidXJsRm9yUmVzdGF1cmFudCIsImFkZFRvIiwicmV2aWV3Iiwib2ZmbGluZV9vYmoiLCJkYXRhIiwib2JqZWN0X3R5cGUiLCJuYXZpZ2F0b3IiLCJvbkxpbmUiLCJzZW5kRGF0YVdoZW5PbmxpbmUiLCJyZXZpZXdTZW5kIiwicmF0aW5nIiwicGFyc2VJbnQiLCJjb21tZW50cyIsInJlc3RhdXJhbnRfaWQiLCJjb25zb2xlIiwibG9nIiwiZmV0Y2hfb3B0aW9ucyIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiaGVhZGVycyIsIkhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJjb250ZW50VHlwZSIsImdldCIsImNhdGNoIiwiZXJyb3IiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwicGFyc2UiLCJnZXRJdGVtIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWwiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJxdWVyeVNlbGVjdG9yIiwiYWRkUmV2aWV3IiwicmVtb3ZlSXRlbSIsImZhdiIsImFkZCIsInNldEF0dHJpYnV0ZSIsInJlc3RhdXJhbnRJZCIsImlzRmF2b3VyaXRlIiwicmVzdGF1cmFudHNTdG9yZSIsImlzX2Zhdm9yaXRlIiwidGFibGUiLCJvYmplY3RzIiwic3RvcmUiLCJBcnJheSIsImlzQXJyYXkiLCJvYmplY3QiLCJpZHgiLCJpbmRleCIsInJldmlld3MiLCJnZXRTdG9yZWRPYmplY3RCeUlkIiwic3RvcmVkUmV2aWV3cyJdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTUEsU0FLSkMsMEJBQ0UsTUFBTyxnQ0FHVEMsNkJBQ0UsU0FBVUMsS0FBS0YsMkJBR2pCRyxtQkFDRSxPQUFPQyxJQUFJQyxLQUFLLEtBQU0sRUFBRyxTQUFTQyxHQUNoQyxPQUFRQSxFQUFVQyxZQUNoQixLQUFLLEVBQ0hELEVBQVVFLGtCQUFrQixjQUFlLENBQ3pDQyxRQUFTLE9BRWIsS0FBSyxFQUNrQkgsRUFBVUUsa0JBQWtCLFVBQVcsQ0FDMURDLFFBQVMsT0FFRUMsWUFBWSxhQUFjLG9CQUsvQ1AsMEJBQ0UsT0FBT0QsS0FBS1MsWUFDVEMsS0FBS0MsSUFHSixPQUZXQSxFQUFHQyxZQUFZLGVBQ0NDLFlBQVksZUFDaEJDLFdBRXhCSixLQUFLSyxHQUN1QixJQUF2QkEsRUFBWUMsT0FDUEMsUUFBUUMsUUFBUUgsR0FFaEJmLEtBQUttQiw0QkFLcEJsQixrQ0FDRSxPQUFPbUIsTUFBTXZCLFNBQVNFLGlCQUNuQlcsS0FBS1csR0FBWUEsRUFBU0Ms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Q0EsRUFBVytFLFlBQWNGLEVBQ3pCQyxFQUFpQjdFLElBQUlELFNBVTdCekIsd0JBQXdCeUcsRUFBT0MsR0FDN0IzRyxLQUFLUyxVQUFVQyxLQUFLQyxJQUNsQixJQUFLQSxFQUFJLE9BR1QsTUFBTWlHLEVBREdqRyxFQUFHQyxZQUFZOEYsRUFBTyxhQUNkN0YsWUFBWTZGLEdBQ3pCRyxNQUFNQyxRQUFRSCxHQUNoQkEsRUFBUWxGLFFBQVFzRixJQUNkSCxFQUFNakYsSUFBSW9GLEtBR1pILEVBQU1qRixJQUFJZ0YsS0FLaEIxRywyQkFBMkJ5RyxFQUFPTSxFQUFLbkYsR0FDckMsT0FBTzdCLEtBQUtTLFlBQVlDLEtBQUtDLElBQzNCLElBQUtBLEVBQUksT0FJVCxPQUZjQSxFQUFHQyxZQUFZOEYsR0FBTzdGLFlBQVk2RixHQUMxQk8sTUFBTUQsR0FDYmxHLE9BQU9lLEtBSTFCNUIsNEJBQTRCNEIsR0FDMUIsT0FBT1QsU0FBU3ZCLFNBQVNDLHNDQUFzQytCLEtBQzVEbkIsS0FBS1csR0FBWUEsRUFBU0MsUUFDMUJaLEtBQUt3RyxJQUNKbEgsS0FBS1MsWUFBWUMsS0FBS0MsSUFDcEIsSUFBS0EsRUFBSSxPQUdULE1BQU1pRyxFQURHakcsRUFBR0MsWUFBWSxVQUFXLGFBQ2xCQyxZQUFZLFdBQ3pCZ0csTUFBTUMsUUFBUUksR0FDaEJBLEVBQVF6RixRQUFRaUMsSUFDZGtELEVBQU1qRixJQUFJK0IsS0FHWmtELEVBQU1qRixJQUFJdUYsS0FJUGpHLFFBQVFDLFFBQVFnRyxLQUV4QmhDLE1BQU1DLEdBQ0V0RixTQUFTc0gsb0JBQW9CLFVBQVcsYUFBY3RGLEdBQUluQixLQUMvRDBHLEdBQ1NuRyxRQUFRQyxRQUFRa0ciLCJmaWxlIjoiZGJoZWxwZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgREJIZWxwZXJ7c3RhdGljIGdldCBEQVRBQkFTRV9VUkwoKXtyZXR1cm5cImh0dHA6Ly9sb2NhbGhvc3Q6MTMzNy9cIn1zdGF0aWMgZ2V0IFJFU1RBVVJBTlRTX1VSTCgpe3JldHVybmAke3RoaXMuREFUQUJBU0VfVVJMfXJlc3RhdXJhbnRzL2B9c3RhdGljIGRiUHJvbWlzZSgpe3JldHVybiBpZGIub3BlbihcImRiXCIsMixmdW5jdGlvbihlKXtzd2l0Y2goZS5vbGRWZXJzaW9uKXtjYXNlIDA6ZS5jcmVhdGVPYmplY3RTdG9yZShcInJlc3RhdXJhbnRzXCIse2tleVBhdGg6XCJpZFwifSk7Y2FzZSAxOmUuY3JlYXRlT2JqZWN0U3RvcmUoXCJyZXZpZXdzXCIse2tleVBhdGg6XCJpZFwifSkuY3JlYXRlSW5kZXgoXCJyZXN0YXVyYW50XCIsXCJyZXN0YXVyYW50X2lkXCIpfX0pfXN0YXRpYyBmZXRjaFJlc3RhdXJhbnRzKCl7cmV0dXJuIHRoaXMuZGJQcm9taXNlKCkudGhlbihlPT57cmV0dXJuIGUudHJhbnNhY3Rpb24oXCJyZXN0YXVyYW50c1wiKS5vYmplY3RTdG9yZShcInJlc3RhdXJhbnRzXCIpLmdldEFsbCgpfSkudGhlbihlPT4wIT09ZS5sZW5ndGg/UHJvbWlzZS5yZXNvbHZlKGUpOnRoaXMuZmV0Y2hBbmRDYWNoZVJlc3RhdXJhbnRzKCkpfXN0YXRpYyBmZXRjaEFuZENhY2hlUmVzdGF1cmFudHMoKXtyZXR1cm4gZmV0Y2goREJIZWxwZXIuUkVTVEFVUkFOVFNfVVJMKS50aGVuKGU9PmUuanNvbigpKS50aGVuKGU9PnRoaXMuZGJQcm9taXNlKCkudGhlbih0PT57Y29uc3Qgcj10LnRyYW5zYWN0aW9uKFwicmVzdGF1cmFudHNcIixcInJlYWR3cml0ZVwiKSxhPXIub2JqZWN0U3RvcmUoXCJyZXN0YXVyYW50c1wiKTtyZXR1cm4gZS5mb3JFYWNoKGU9PmEucHV0KGUpKSxyLmNvbXBsZXRlLnRoZW4oKCk9PlByb21pc2UucmVzb2x2ZShlKSl9KSl9c3RhdGljIGZldGNoUmVzdGF1cmFudEJ5SWQoZSl7cmV0dXJuIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKS50aGVuKHQ9PnQuZmluZCh0PT50LmlkPT09ZSkpfXN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmUoZSl7cmV0dXJuIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKS50aGVuKHQ9PnQuZmlsdGVyKHQ9PnQuY3Vpc2luZV90eXBlPT09ZSkpfXN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeU5laWdoYm9yaG9vZChlKXtyZXR1cm4gREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygpLnRoZW4odD0+dC5maWx0ZXIodD0+dC5uZWlnaGJvcmhvb2Q9PT1lKSl9c3RhdGljIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZUFuZE5laWdoYm9yaG9vZChlLHQpe3JldHVybiBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKCkudGhlbihyPT57bGV0IGE9cjtyZXR1cm5cImFsbFwiIT09ZSYmKGE9YS5maWx0ZXIodD0+dC5jdWlzaW5lX3R5cGU9PWUpKSxcImFsbFwiIT09dCYmKGE9YS5maWx0ZXIoZT0+ZS5uZWlnaGJvcmhvb2Q9PXQpKSxhfSl9c3RhdGljIGZldGNoTmVpZ2hib3Job29kcyhlKXtyZXR1cm4gREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygpLnRoZW4oZT0+e2NvbnN0IHQ9ZS5tYXAoKHQscik9PmVbcl0ubmVpZ2hib3Job29kKTtyZXR1cm4gdC5maWx0ZXIoKGUscik9PnQuaW5kZXhPZihlKT09cil9KX1zdGF0aWMgZmV0Y2hDdWlzaW5lcygpe3JldHVybiBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKCkudGhlbihlPT57Y29uc3QgdD1lLm1hcCgodCxyKT0+ZVtyXS5jdWlzaW5lX3R5cGUpO3JldHVybiB0LmZpbHRlcigoZSxyKT0+dC5pbmRleE9mKGUpPT1yKX0pfXN0YXRpYyB1cmxGb3JSZXN0YXVyYW50KGUpe3JldHVybmAuL3Jlc3RhdXJhbnQuaHRtbD9pZD0ke2UuaWR9YH1zdGF0aWMgaW1hZ2VVcmxGb3JSZXN0YXVyYW50KGUpe3JldHVybiB2b2lkIDA9PT1lLnBob3RvZ3JhcGg/YC9pbWcvJHtlLmlkfS5qcGdgOmAvaW1nLyR7ZS5waG90b2dyYXBofS5qcGdgfXN0YXRpYyBtYXBNYXJrZXJGb3JSZXN0YXVyYW50KGUsdCl7Y29uc3Qgcj1uZXcgTC5tYXJrZXIoW2UubGF0bG5nLmxhdCxlLmxhdGxuZy5sbmddLHt0aXRsZTplLm5hbWUsYWx0OmUubmFtZSx1cmw6REJIZWxwZXIudXJsRm9yUmVzdGF1cmFudChlKX0pO3JldHVybiByLmFkZFRvKHQpLHJ9c3RhdGljIGFkZFJldmlldyhlKXtsZXQgdD17bmFtZTpcImFkZFJldmlld1wiLGRhdGE6ZSxvYmplY3RfdHlwZTpcInJldmlld1wifTtpZighbmF2aWdhdG9yLm9uTGluZSYmXCJhZGRSZXZpZXdcIj09PXQubmFtZSlyZXR1cm4gdm9pZCBEQkhlbHBlci5zZW5kRGF0YVdoZW5PbmxpbmUodCk7bGV0IHI9e25hbWU6ZS5uYW1lLHJhdGluZzpwYXJzZUludChlLnJhdGluZyksY29tbWVudHM6ZS5jb21tZW50cyxyZXN0YXVyYW50X2lkOnBhcnNlSW50KGUucmVzdGF1cmFudF9pZCl9O2NvbnNvbGUubG9nKFwiU2VuZGluZyByZXZpZXc6IFwiLHIpO3ZhciBhPXttZXRob2Q6XCJQT1NUXCIsYm9keTpKU09OLnN0cmluZ2lmeShyKSxoZWFkZXJzOm5ldyBIZWFkZXJzKHtcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24vanNvblwifSl9O2ZldGNoKFwiaHR0cDovL2xvY2FsaG9zdDoxMzM3L3Jldmlld3NcIixhKS50aGVuKGU9Pntjb25zdCB0PWUuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIik7cmV0dXJuIHQmJi0xIT09dC5pbmRleE9mKFwiYXBwbGljYXRpb24vanNvblwiKT9lLmpzb24oKTpcIkFQSSBjYWxsIHN1Y2Nlc3NmdWxsXCJ9KS50aGVuKGU9Pntjb25zb2xlLmxvZyhcIkZldGNoIHN1Y2Nlc3NmdWwhXCIpfSkuY2F0Y2goZT0+Y29uc29sZS5sb2coXCJlcnJvcjpcIixlKSl9c3RhdGljIHNlbmREYXRhV2hlbk9ubGluZShlKXtjb25zb2xlLmxvZyhcIk9mZmxpbmUgT0JKXCIsZSksbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJkYXRhXCIsSlNPTi5zdHJpbmdpZnkoZS5kYXRhKSksY29uc29sZS5sb2coYExvY2FsIFN0b3JhZ2U6ICR7ZS5vYmplY3RfdHlwZX0gc3RvcmVkYCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIix0PT57Y29uc29sZS5sb2coXCJCcm93c2VyOiBPbmxpbmUgYWdhaW4hXCIpO2xldCByPUpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJkYXRhXCIpKTtjb25zb2xlLmxvZyhcInVwZGF0aW5nIGFuZCBjbGVhbmluZyB1aVwiKSxbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5yZXZpZXdzX29mZmxpbmVcIildLmZvckVhY2goZT0+e2UuY2xhc3NMaXN0LnJlbW92ZShcInJldmlld3Nfb2ZmbGluZVwiKSxlLnF1ZXJ5U2VsZWN0b3IoXCIub2ZmbGluZV9sYWJlbFwiKS5yZW1vdmUoKX0pLG51bGwhPT1yJiYoY29uc29sZS5sb2cociksXCJhZGRSZXZpZXdcIj09PWUubmFtZSYmREJIZWxwZXIuYWRkUmV2aWV3KGUuZGF0YSksY29uc29sZS5sb2coXCJMb2NhbFN0YXRlOiBkYXRhIHNlbnQgdG8gYXBpXCIpLGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwiZGF0YVwiKSxjb25zb2xlLmxvZyhgTG9jYWwgU3RvcmFnZTogJHtlLm9iamVjdF90eXBlfSByZW1vdmVkYCkpfSl9c3RhdGljIGNoYW5nZUZhdkljb25DbGFzcyhlLHQpe3Q/KGUuY2xhc3NMaXN0LnJlbW92ZShcImZhdm9yaXRlX25vXCIpLGUuY2xhc3NMaXN0LmFkZChcImZhdm9yaXRlX3llc1wiKSxlLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIixcIlJlbW92ZSBhcyBhIGZhdm9yaXRlXCIpKTooZS5jbGFzc0xpc3QucmVtb3ZlKFwiZmF2b3JpdGVfeWVzXCIpLGUuY2xhc3NMaXN0LmFkZChcImZhdm9yaXRlX25vXCIpLGUuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLFwiTWFyayBhcyBhIGZhdm9yaXRlXCIpKX1zdGF0aWMgdXBkYXRlRmF2b3VyaXRlU3RhdHVzKGUsdCl7ZmV0Y2goYCR7dGhpcy5SRVNUQVVSQU5UU19VUkx9JHtlfS8/aXNfZmF2b3JpdGU9JHt0fWAse21ldGhvZDpcIlBVVFwifSkudGhlbigoKT0+e3RoaXMuZGJQcm9taXNlKCkudGhlbihyPT57Y29uc3QgYT1yLnRyYW5zYWN0aW9uKFwicmVzdGF1cmFudHNcIixcInJlYWR3cml0ZVwiKS5vYmplY3RTdG9yZShcInJlc3RhdXJhbnRzXCIpO2EuZ2V0KGUpLnRoZW4oZT0+e2UuaXNfZmF2b3JpdGU9dCxhLnB1dChlKX0pfSl9KX1zdGF0aWMgc3RvcmVJbkluZGV4ZWREQihlLHQpe3RoaXMuZGJQcm9taXNlLnRoZW4ocj0+e2lmKCFyKXJldHVybjtjb25zdCBhPXIudHJhbnNhY3Rpb24oZSxcInJlYWR3cml0ZVwiKS5vYmplY3RTdG9yZShlKTtBcnJheS5pc0FycmF5KHQpP3QuZm9yRWFjaChlPT57YS5wdXQoZSl9KTphLnB1dCh0KX0pfXN0YXRpYyBnZXRTdG9yZWRPYmplY3RCeUlkKGUsdCxyKXtyZXR1cm4gdGhpcy5kYlByb21pc2UoKS50aGVuKGE9PntpZighYSlyZXR1cm47cmV0dXJuIGEudHJhbnNhY3Rpb24oZSkub2JqZWN0U3RvcmUoZSkuaW5kZXgodCkuZ2V0QWxsKHIpfSl9c3RhdGljIGZldGNoUmV2aWV3c0J5UmVzdElkKGUpe3JldHVybiBmZXRjaChgJHtEQkhlbHBlci5EQVRBQkFTRV9VUkx9cmV2aWV3cy8/cmVzdGF1cmFudF9pZD0ke2V9YCkudGhlbihlPT5lLmpzb24oKSkudGhlbihlPT4odGhpcy5kYlByb21pc2UoKS50aGVuKHQ9PntpZighdClyZXR1cm47Y29uc3Qgcj10LnRyYW5zYWN0aW9uKFwicmV2aWV3c1wiLFwicmVhZHdyaXRlXCIpLm9iamVjdFN0b3JlKFwicmV2aWV3c1wiKTtBcnJheS5pc0FycmF5KGUpP2UuZm9yRWFjaChlPT57ci5wdXQoZSl9KTpyLnB1dChlKX0pLFByb21pc2UucmVzb2x2ZShlKSkpLmNhdGNoKHQ9PkRCSGVscGVyLmdldFN0b3JlZE9iamVjdEJ5SWQoXCJyZXZpZXdzXCIsXCJyZXN0YXVyYW50XCIsZSkudGhlbihlPT5Qcm9taXNlLnJlc29sdmUoZSkpKX19XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUmlhR1ZzY0dWeUxtMXBiaTVxY3lKZExDSnVZVzFsY3lJNld5SkVRa2hsYkhCbGNpSXNJa1JCVkVGQ1FWTkZYMVZTVENJc0lsSkZVMVJCVlZKQlRsUlRYMVZTVENJc0luUm9hWE1pTENKYmIySnFaV04wSUU5aWFtVmpkRjBpTENKcFpHSWlMQ0p2Y0dWdUlpd2lkWEJuY21Ga1pVUmlJaXdpYjJ4a1ZtVnljMmx2YmlJc0ltTnlaV0YwWlU5aWFtVmpkRk4wYjNKbElpd2lhMlY1VUdGMGFDSXNJbU55WldGMFpVbHVaR1Y0SWl3aVpHSlFjbTl0YVhObElpd2lkR2hsYmlJc0ltUmlJaXdpZEhKaGJuTmhZM1JwYjI0aUxDSnZZbXBsWTNSVGRHOXlaU0lzSW1kbGRFRnNiQ0lzSW5KbGMzUmhkWEpoYm5Seklpd2liR1Z1WjNSb0lpd2lVSEp2YldselpTSXNJbkpsYzI5c2RtVWlMQ0ptWlhSamFFRnVaRU5oWTJobFVtVnpkR0YxY21GdWRITWlMQ0ptWlhSamFDSXNJbkpsYzNCdmJuTmxJaXdpYW5OdmJpSXNJblI0SWl3aWNtVnpkR0YxY21GdWRGTjBiM0psSWl3aVptOXlSV0ZqYUNJc0luSmxjM1JoZFhKaGJuUWlMQ0p3ZFhRaUxDSmpiMjF3YkdWMFpTSXNJbWxrSWl3aVptVjBZMmhTWlhOMFlYVnlZVzUwY3lJc0ltWnBibVFpTENKeUlpd2lZM1ZwYzJsdVpTSXNJbVpwYkhSbGNpSXNJbU4xYVhOcGJtVmZkSGx3WlNJc0ltNWxhV2RvWW05eWFHOXZaQ0lzSW5KbGMzVnNkSE1pTENKallXeHNZbUZqYXlJc0ltNWxhV2RvWW05eWFHOXZaSE1pTENKdFlYQWlMQ0oySWl3aWFTSXNJbWx1WkdWNFQyWWlMQ0pqZFdsemFXNWxjeUlzSW5WdVpHVm1hVzVsWkNJc0luQm9iM1J2WjNKaGNHZ2lMQ0p0WVhKclpYSWlMQ0pNSWl3aWJHRjBiRzVuSWl3aWJHRjBJaXdpYkc1bklpd2lkR2wwYkdVaUxDSnVZVzFsSWl3aVlXeDBJaXdpZFhKc0lpd2lkWEpzUm05eVVtVnpkR0YxY21GdWRDSXNJbUZrWkZSdklpd2ljbVYyYVdWM0lpd2liMlptYkdsdVpWOXZZbW9pTENKa1lYUmhJaXdpYjJKcVpXTjBYM1I1Y0dVaUxDSnVZWFpwWjJGMGIzSWlMQ0p2Ymt4cGJtVWlMQ0p6Wlc1a1JHRjBZVmRvWlc1UGJteHBibVVpTENKeVpYWnBaWGRUWlc1a0lpd2ljbUYwYVc1bklpd2ljR0Z5YzJWSmJuUWlMQ0pqYjIxdFpXNTBjeUlzSW5KbGMzUmhkWEpoYm5SZmFXUWlMQ0pqYjI1emIyeGxJaXdpYkc5bklpd2labVYwWTJoZmIzQjBhVzl1Y3lJc0ltMWxkR2h2WkNJc0ltSnZaSGtpTENKS1UwOU9JaXdpYzNSeWFXNW5hV1o1SWl3aWFHVmhaR1Z5Y3lJc0lraGxZV1JsY25NaUxDSkRiMjUwWlc1MExWUjVjR1VpTENKamIyNTBaVzUwVkhsd1pTSXNJbWRsZENJc0ltTmhkR05vSWl3aVpYSnliM0lpTENKc2IyTmhiRk4wYjNKaFoyVWlMQ0p6WlhSSmRHVnRJaXdpZDJsdVpHOTNJaXdpWVdSa1JYWmxiblJNYVhOMFpXNWxjaUlzSW1WMlpXNTBJaXdpY0dGeWMyVWlMQ0puWlhSSmRHVnRJaXdpWkc5amRXMWxiblFpTENKeGRXVnllVk5sYkdWamRHOXlRV3hzSWl3aVpXd2lMQ0pqYkdGemMweHBjM1FpTENKeVpXMXZkbVVpTENKeGRXVnllVk5sYkdWamRHOXlJaXdpWVdSa1VtVjJhV1YzSWl3aWNtVnRiM1psU1hSbGJTSXNJbVpoZGlJc0ltRmtaQ0lzSW5ObGRFRjBkSEpwWW5WMFpTSXNJbkpsYzNSaGRYSmhiblJKWkNJc0ltbHpSbUYyYjNWeWFYUmxJaXdpY21WemRHRjFjbUZ1ZEhOVGRHOXlaU0lzSW1selgyWmhkbTl5YVhSbElpd2lkR0ZpYkdVaUxDSnZZbXBsWTNSeklpd2ljM1J2Y21VaUxDSkJjbkpoZVNJc0ltbHpRWEp5WVhraUxDSnZZbXBsWTNRaUxDSnBaSGdpTENKcGJtUmxlQ0lzSW5KbGRtbGxkM01pTENKblpYUlRkRzl5WldSUFltcGxZM1JDZVVsa0lpd2ljM1J2Y21Wa1VtVjJhV1YzY3lKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUjBFc1RVRkJUVUVzVTBGTlNrTXNNRUpCUlVVc1RVRkJUeXg1UWtGSFZFTXNOa0pCUTBVc1UwRkJWVU1zUzBGQlMwWXNNa0pCU1dwQ1J5eHRRa0ZEUlN4UFFVRlBReXhKUVVGSlF5eExRVUZMTEV0QlFVMHNSVUZCUnl4VFFVRlZReXhIUVVOcVF5eFBRVUZSUVN4RlFVRlZReXhaUVVOb1FpeExRVUZMTEVWQlEwaEVMRVZCUVZWRkxHdENRVUZyUWl4alFVRmxMRU5CUTNwRFF5eFJRVUZUTEU5QlJXSXNTMEZCU3l4RlFVTnJRa2dzUlVGQlZVVXNhMEpCUVd0Q0xGVkJRVmNzUTBGRE1VUkRMRkZCUVZNc1QwRkZSVU1zV1VGQldTeGhRVUZqTEc5Q1FVc3ZRMUFzTUVKQlEwVXNUMEZCVDBRc1MwRkJTMU1zV1VGRFZFTXNTMEZCUzBNc1NVRkhTaXhQUVVaWFFTeEZRVUZIUXl4WlFVRlpMR1ZCUTBORExGbEJRVmtzWlVGRGFFSkRMRmRCUlhoQ1NpeExRVUZMU3l4SFFVTjFRaXhKUVVGMlFrRXNSVUZCV1VNc1QwRkRVRU1zVVVGQlVVTXNVVUZCVVVnc1IwRkZhRUptTEV0QlFVdHRRaXcwUWtGTGNFSnNRaXhyUTBGRFJTeFBRVUZQYlVJc1RVRkJUWFpDTEZOQlFWTkZMR2xDUVVOdVFsY3NTMEZCUzFjc1IwRkJXVUVzUlVGQlUwTXNVVUZETVVKYUxFdEJRVXRMTEVkQlEwZG1MRXRCUVV0VExGbEJRMVJETEV0QlFVdERMRWxCUTBvc1RVRkJUVmtzUlVGQlMxb3NSVUZCUjBNc1dVRkJXU3hqUVVGbExHRkJRMjVEV1N4RlFVRnJRa1FzUlVGQlIxWXNXVUZCV1N4bFFVZDJReXhQUVVaQlJTeEZRVUZaVlN4UlFVRlJReXhIUVVGalJpeEZRVUZuUWtjc1NVRkJTVVFzU1VGRkwwTklMRVZCUVVkTExGTkJRMUJzUWl4TFFVRkxMRWxCUVUxUExGRkJRVkZETEZGQlFWRklMRTlCVVhoRFpDd3lRa0ZCTWtJMFFpeEhRVU42UWl4UFFVRlBhRU1zVTBGQlUybERMRzFDUVVOaWNFSXNTMEZCUzBzc1IwRkJaVUVzUlVGQldXZENMRXRCUVV0RExFZEJRVXRCTEVWQlFVVklMRXRCUVU5QkxFbEJUWGhFTlVJc1owTkJRV2REWjBNc1IwRkRPVUlzVDBGQlQzQkRMRk5CUVZOcFF5eHRRa0ZEWW5CQ0xFdEJRVXRMTEVkQlFXVkJMRVZCUVZsdFFpeFBRVUZQUml4SFFVRkxRU3hGUVVGRlJ5eGxRVUZwUWtZc1NVRk5jRVZvUXl4eFEwRkJjVU50UXl4SFFVTnVReXhQUVVGUGRrTXNVMEZCVTJsRExHMUNRVU5pY0VJc1MwRkJTMHNzUjBGQlpVRXNSVUZCV1cxQ0xFOUJRVTlHTEVkQlFVdEJMRVZCUVVWSkxHVkJRV2xDUVN4SlFVMXdSVzVETEN0RFFVRXJRMmRETEVWQlFWTkhMRWRCUTNSRUxFOUJRVTkyUXl4VFFVRlRhVU1zYlVKQlEySndRaXhMUVVGTFN5eEpRVU5LTEVsQlFVbHpRaXhGUVVGVmRFSXNSVUZQWkN4TlFVNW5RaXhSUVVGYWEwSXNTVUZEUmtrc1JVRkJWVUVzUlVGQlVVZ3NUMEZCVDBZc1IwRkJTMEVzUlVGQlJVY3NZMEZCWjBKR0xFbEJSVGRDTEZGQlFXcENSeXhKUVVOR1F5eEZRVUZWUVN4RlFVRlJTQ3hQUVVGUFJpeEhRVUZMUVN4RlFVRkZTU3hqUVVGblFrRXNTVUZGTTBORExFbEJUMkp3UXl3d1FrRkJNRUp4UXl4SFFVVjRRaXhQUVVGUGVrTXNVMEZCVTJsRExHMUNRVU5pY0VJc1MwRkJTMHNzU1VGRlNpeE5RVUZOZDBJc1JVRkJaMEo0UWl4RlFVRlplVUlzU1VGQlNTeERRVUZEUXl4RlFVRkhReXhKUVVGTk0wSXNSVUZCV1RKQ0xFZEJRVWRPTEdOQlJ5OUVMRTlCUkRSQ1J5eEZRVUZqVEN4UFFVRlBMRU5CUVVOUExFVkJRVWRETEVsQlFVMUlMRVZCUVdOSkxGRkJRVkZHTEVsQlFVMURMRXRCVVRkR2VrTXNkVUpCUlVVc1QwRkJUMG9zVTBGQlUybERMRzFDUVVOaWNFSXNTMEZCUzBzc1NVRkZTaXhOUVVGTk5rSXNSVUZCVnpkQ0xFVkJRVmw1UWl4SlFVRkpMRU5CUVVORExFVkJRVWRETEVsQlFVMHpRaXhGUVVGWk1rSXNSMEZCUjFBc1kwRkhNVVFzVDBGRWRVSlRMRVZCUVZOV0xFOUJRVThzUTBGQlEwOHNSVUZCUjBNc1NVRkJUVVVzUlVGQlUwUXNVVUZCVVVZc1NVRkJUVU1zUzBGUE9VVjZReXgzUWtGQmQwSjVRaXhIUVVOMFFpdzRRa0ZCWjBOQkxFVkJRVmRITEV0QlRUZEROVUlzTmtKQlFUWkNlVUlzUjBGRE0wSXNXVUZCT0VKdFFpeEpRVUV4UW01Q0xFVkJRVmR2UWl4dFFrRkRSM0JDTEVWQlFXVXNhVUpCUldwQ1FTeEZRVUZYYjBJc2FVSkJUVGRDTjBNc09FSkJRVGhDZVVJc1JVRkJXV01zUjBGRmVFTXNUVUZCVFU4c1JVRkJVeXhKUVVGSlF5eEZRVUZGUkN4UFFVRlBMRU5CUVVOeVFpeEZRVUZYZFVJc1QwRkJUME1zU1VGQlMzaENMRVZCUVZkMVFpeFBRVUZQUlN4TFFVRk5MRU5CUXpGRlF5eE5RVUZQTVVJc1JVRkJWekpDTEV0QlEyeENReXhKUVVGTE5VSXNSVUZCVnpKQ0xFdEJRMmhDUlN4SlFVRkxNVVFzVTBGQlV6SkVMR2xDUVVGcFFqbENMRXRCUjJwRExFOUJSRUZ4UWl4RlFVRlBWU3hOUVVGTmFrSXNSMEZEVGs4c1JVRkhWRGxETEdsQ1FVRnBRbmxFTEVkQlEyWXNTVUZCU1VNc1JVRkJZeXhEUVVOb1FrNHNTMEZCVFN4WlFVTk9UeXhMUVVGTlJpeEZRVU5PUnl4WlFVRmhMRlZCUjJZc1NVRkJTME1zVlVGQlZVTXNVVUZCWjBNc1kwRkJja0pLTEVWQlFWbE9MRXRCUlhCRExGbEJSRUY0UkN4VFFVRlRiVVVzYlVKQlFXMUNUQ3hIUVVjNVFpeEpRVUZKVFN4RlFVRmhMRU5CUTJaYUxFdEJRVkZMTEVWQlFVOU1MRXRCUTJaaExFOUJRVlZETEZOQlFWTlVMRVZCUVU5UkxGRkJRekZDUlN4VFFVRlpWaXhGUVVGUFZTeFRRVU51UWtNc1kwRkJhVUpHTEZOQlFWTlVMRVZCUVU5WExHZENRVVZ1UTBNc1VVRkJVVU1zU1VGQlNTeHRRa0ZCYjBKT0xFZEJRMmhETEVsQlFVbFBMRVZCUVdkQ0xFTkJRMnhDUXl4UFFVRlJMRTlCUTFKRExFdEJRVTFETEV0QlFVdERMRlZCUVZWWUxFZEJRM0pDV1N4UlFVRlRMRWxCUVVsRExGRkJRVkVzUTBGRGJrSkRMR1ZCUVdkQ0xITkNRVWR3UWpORUxFMUJRVTBzWjBOQlFXbERiMFFzUjBGQlpUbEVMRXRCUVUxWExFbEJRM2hFTEUxQlFVMHlSQ3hGUVVGak0wUXNSVUZCVTNkRUxGRkJRVkZKTEVsQlFVa3NaMEpCUTNwRExFOUJRVWxFTEVsQlFUUkVMRWxCUVRkRFFTeEZRVUZaY2tNc1VVRkJVU3h2UWtGRE9VSjBRaXhGUVVGVFF5eFBRVVZVTEhsQ1FVZFdXaXhMUVVGTmEwUXNTVUZEVEZVc1VVRkJVVU1zU1VGQlNTeDFRa0ZGWWxjc1RVRkJUVU1zUjBGQlUySXNVVUZCVVVNc1NVRkJTU3hUUVVGVldTeEpRVWN4UTJ4R0xEQkNRVUV3UWpCRUxFZEJRM2hDVnl4UlFVRlJReXhKUVVGSkxHTkJRV1ZhTEVkQlF6TkNlVUlzWVVGQllVTXNVVUZCVVN4UFFVRlJWaXhMUVVGTFF5eFZRVUZWYWtJc1JVRkJXVU1zVDBGRGVFUlZMRkZCUVZGRExITkNRVUZ6UWxvc1JVRkJXVVVzYzBKQlF6RkRlVUlzVDBGQlQwTXNhVUpCUVdsQ0xGTkJRVmRETEVsQlEycERiRUlzVVVGQlVVTXNTVUZCU1N3d1FrRkRXaXhKUVVGSldDeEZRVUZQWlN4TFFVRkxZeXhOUVVGTlRDeGhRVUZoVFN4UlFVRlJMRk5CUXpORGNFSXNVVUZCVVVNc1NVRkJTU3cwUWtGRFdpeEpRVUZKYjBJc1UwRkJVME1zYVVKQlFXbENMSEZDUVVNM1FtNUZMRkZCUVZGdlJTeEpRVU5RUVN4RlFVRkhReXhWUVVGVlF5eFBRVUZQTEcxQ1FVTndRa1lzUlVGQlIwY3NZMEZCWXl4clFrRkJhMEpFTEZkQlJYaENMRTlCUVZSdVF5eEpRVU5HVlN4UlFVRlJReXhKUVVGSldDeEhRVU5oTEdOQlFYSkNSQ3hGUVVGWlRpeE5RVU5rZUVRc1UwRkJVMjlITEZWQlFWVjBReXhGUVVGWlF5eE5RVWRxUTFVc1VVRkJVVU1zU1VGQlNTeG5RMEZGV21Fc1lVRkJZV01zVjBGQlZ5eFJRVU40UWpWQ0xGRkJRVkZETEhOQ1FVRnpRbG9zUlVGQldVVXNNRUpCU1doRU5VUXNNRUpCUVRCQ05FWXNSVUZCU1Uwc1IwRkRka0pCTEVkQlRVaE9MRVZCUVVkRExGVkJRVlZETEU5QlFVOHNaVUZEY0VKR0xFVkJRVWRETEZWQlFWVk5MRWxCUVVrc1owSkJRMnBDVUN4RlFVRkhVU3hoUVVGaExHRkJRV01zTUVKQlVEbENVaXhGUVVGSFF5eFZRVUZWUXl4UFFVRlBMR2RDUVVOd1FrWXNSVUZCUjBNc1ZVRkJWVTBzU1VGQlNTeGxRVU5xUWxBc1JVRkJSMUVzWVVGQllTeGhRVUZqTEhWQ1FWVnNRM0JITERaQ1FVRTJRbkZITEVWQlFXTkRMRWRCUTNwRGJrWXNVMEZCVTNCQ0xFdEJRVXRFTEd0Q1FVRnJRblZITEd0Q1FVRTJRa01zU1VGQlpTeERRVU40UlRsQ0xFOUJRVkVzVVVGRlZDOUVMRXRCUVVzc1MwRkRTbFlzUzBGQlMxTXNXVUZEUmtNc1MwRkJTME1zU1VGRFNpeE5RVU5OTmtZc1JVRkVTemRHTEVWQlFVZERMRmxCUVZrc1kwRkJaU3hoUVVOaVF5eFpRVUZaTEdWQlEzaERNa1lzUlVGQmFVSjJRaXhKUVVGSmNVSXNSMEZEYkVJMVJpeExRVUZMWjBJc1NVRkRTa0VzUlVGQlZ5dEZMRmxCUVdOR0xFVkJRM3BDUXl4RlFVRnBRamRGTEVsQlFVbEVMRk5CV1c1RGVrSXNkMEpCUVhkQ2VVY3NSVUZCVDBNc1IwRkROMEl6Unl4TFFVRkxVeXhWUVVGVlF5eExRVUZMUXl4SlFVTnNRaXhKUVVGTFFTeEZRVUZKTEU5QlIxUXNUVUZCVFdsSExFVkJSRWRxUnl4RlFVRkhReXhaUVVGWk9FWXNSVUZCVHl4aFFVTmtOMFlzV1VGQldUWkdMRWRCUTNwQ1J5eE5RVUZOUXl4UlFVRlJTQ3hIUVVOb1FrRXNSVUZCVVd4R0xGRkJRVkZ6Uml4SlFVTmtTQ3hGUVVGTmFrWXNTVUZCU1c5R0xFdEJSMXBJTEVWQlFVMXFSaXhKUVVGSlowWXNTMEZMYUVJeFJ5d3lRa0ZCTWtKNVJ5eEZRVUZQVFN4RlFVRkxia1lzUjBGRGNrTXNUMEZCVHpkQ0xFdEJRVXRUTEZsQlExUkRMRXRCUVV0RExFbEJRMG9zU1VGQlMwRXNSVUZCU1N4UFFVbFVMRTlCUm1OQkxFVkJRVWRETEZsQlFWazRSaXhIUVVGUE4wWXNXVUZCV1RaR0xFZEJRekZDVHl4TlFVRk5SQ3hIUVVOaWJFY3NUMEZCVDJVc1MwRkpOVUkxUWl3MFFrRkJORUkwUWl4SFFVTXhRaXhQUVVGUFZDeFRRVUZUZGtJc1UwRkJVME1zYzBOQlFYTkRLMElzUzBGRE5VUnVRaXhMUVVGTFZ5eEhRVUZaUVN4RlFVRlRReXhSUVVNeFFsb3NTMEZCUzNkSExFbEJRMHBzU0N4TFFVRkxVeXhaUVVOR1F5eExRVUZMUXl4SlFVTktMRWxCUVV0QkxFVkJRVWtzVDBGSFZDeE5RVUZOYVVjc1JVRkVSMnBITEVWQlFVZERMRmxCUVZrc1ZVRkJWeXhoUVVOc1FrTXNXVUZCV1N4WFFVTjZRbWRITEUxQlFVMURMRkZCUVZGSkxFZEJRMmhDUVN4RlFVRlJla1lzVVVGQlVXbERMRWxCUTJSclJDeEZRVUZOYWtZc1NVRkJTU3RDTEV0QlIxcHJSQ3hGUVVGTmFrWXNTVUZCU1hWR0xFdEJTVlJxUnl4UlFVRlJReXhSUVVGUlowY3NTMEZGZUVKb1F5eE5RVUZOUXl4SFFVTkZkRVlzVTBGQlUzTklMRzlDUVVGdlFpeFZRVUZYTEdGQlFXTjBSaXhIUVVNeFJHNUNMRXRCUVUwd1J5eEhRVU5GYmtjc1VVRkJVVU1zVVVGQlVXdEhJaXdpWm1sc1pTSTZJbVJpYUdWc2NHVnlMbTFwYmk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbU5zWVhOeklFUkNTR1ZzY0dWeWUzTjBZWFJwWXlCblpYUWdSRUZVUVVKQlUwVmZWVkpNS0NsN2NtVjBkWEp1WENKb2RIUndPaTh2Ykc5allXeG9iM04wT2pFek16Y3ZYQ0o5YzNSaGRHbGpJR2RsZENCU1JWTlVRVlZTUVU1VVUxOVZVa3dvS1h0eVpYUjFjbTVnSkh0MGFHbHpMa1JCVkVGQ1FWTkZYMVZTVEgxeVpYTjBZWFZ5WVc1MGN5OWdmWE4wWVhScFl5QmtZbEJ5YjIxcGMyVW9LWHR5WlhSMWNtNGdhV1JpTG05d1pXNG9YQ0prWWx3aUxESXNablZ1WTNScGIyNG9aU2w3YzNkcGRHTm9LR1V1YjJ4a1ZtVnljMmx2YmlsN1kyRnpaU0F3T21VdVkzSmxZWFJsVDJKcVpXTjBVM1J2Y21Vb1hDSnlaWE4wWVhWeVlXNTBjMXdpTEh0clpYbFFZWFJvT2x3aWFXUmNJbjBwTzJOaGMyVWdNVHBsTG1OeVpXRjBaVTlpYW1WamRGTjBiM0psS0Z3aWNtVjJhV1YzYzF3aUxIdHJaWGxRWVhSb09sd2lhV1JjSW4wcExtTnlaV0YwWlVsdVpHVjRLRndpY21WemRHRjFjbUZ1ZEZ3aUxGd2ljbVZ6ZEdGMWNtRnVkRjlwWkZ3aUtYMTlLWDF6ZEdGMGFXTWdabVYwWTJoU1pYTjBZWFZ5WVc1MGN5Z3BlM0psZEhWeWJpQjBhR2x6TG1SaVVISnZiV2x6WlNncExuUm9aVzRvWlQwK2UzSmxkSFZ5YmlCbExuUnlZVzV6WVdOMGFXOXVLRndpY21WemRHRjFjbUZ1ZEhOY0lpa3ViMkpxWldOMFUzUnZjbVVvWENKeVpYTjBZWFZ5WVc1MGMxd2lLUzVuWlhSQmJHd29LWDBwTG5Sb1pXNG9aVDArTUNFOVBXVXViR1Z1WjNSb1AxQnliMjFwYzJVdWNtVnpiMngyWlNobEtUcDBhR2x6TG1abGRHTm9RVzVrUTJGamFHVlNaWE4wWVhWeVlXNTBjeWdwS1gxemRHRjBhV01nWm1WMFkyaEJibVJEWVdOb1pWSmxjM1JoZFhKaGJuUnpLQ2w3Y21WMGRYSnVJR1psZEdOb0tFUkNTR1ZzY0dWeUxsSkZVMVJCVlZKQlRsUlRYMVZTVENrdWRHaGxiaWhsUFQ1bExtcHpiMjRvS1NrdWRHaGxiaWhsUFQ1MGFHbHpMbVJpVUhKdmJXbHpaU2dwTG5Sb1pXNG9kRDArZTJOdmJuTjBJSEk5ZEM1MGNtRnVjMkZqZEdsdmJpaGNJbkpsYzNSaGRYSmhiblJ6WENJc1hDSnlaV0ZrZDNKcGRHVmNJaWtzWVQxeUxtOWlhbVZqZEZOMGIzSmxLRndpY21WemRHRjFjbUZ1ZEhOY0lpazdjbVYwZFhKdUlHVXVabTl5UldGamFDaGxQVDVoTG5CMWRDaGxLU2tzY2k1amIyMXdiR1YwWlM1MGFHVnVLQ2dwUFQ1UWNtOXRhWE5sTG5KbGMyOXNkbVVvWlNrcGZTa3BmWE4wWVhScFl5Qm1aWFJqYUZKbGMzUmhkWEpoYm5SQ2VVbGtLR1VwZTNKbGRIVnliaUJFUWtobGJIQmxjaTVtWlhSamFGSmxjM1JoZFhKaGJuUnpLQ2t1ZEdobGJpaDBQVDUwTG1acGJtUW9kRDArZEM1cFpEMDlQV1VwS1gxemRHRjBhV01nWm1WMFkyaFNaWE4wWVhWeVlXNTBRbmxEZFdsemFXNWxLR1VwZTNKbGRIVnliaUJFUWtobGJIQmxjaTVtWlhSamFGSmxjM1JoZFhKaGJuUnpLQ2t1ZEdobGJpaDBQVDUwTG1acGJIUmxjaWgwUFQ1MExtTjFhWE5wYm1WZmRIbHdaVDA5UFdVcEtYMXpkR0YwYVdNZ1ptVjBZMmhTWlhOMFlYVnlZVzUwUW5sT1pXbG5hR0p2Y21odmIyUW9aU2w3Y21WMGRYSnVJRVJDU0dWc2NHVnlMbVpsZEdOb1VtVnpkR0YxY21GdWRITW9LUzUwYUdWdUtIUTlQblF1Wm1sc2RHVnlLSFE5UG5RdWJtVnBaMmhpYjNKb2IyOWtQVDA5WlNrcGZYTjBZWFJwWXlCbVpYUmphRkpsYzNSaGRYSmhiblJDZVVOMWFYTnBibVZCYm1ST1pXbG5hR0p2Y21odmIyUW9aU3gwS1h0eVpYUjFjbTRnUkVKSVpXeHdaWEl1Wm1WMFkyaFNaWE4wWVhWeVlXNTBjeWdwTG5Sb1pXNG9jajArZTJ4bGRDQmhQWEk3Y21WMGRYSnVYQ0poYkd4Y0lpRTlQV1VtSmloaFBXRXVabWxzZEdWeUtIUTlQblF1WTNWcGMybHVaVjkwZVhCbFBUMWxLU2tzWENKaGJHeGNJaUU5UFhRbUppaGhQV0V1Wm1sc2RHVnlLR1U5UG1VdWJtVnBaMmhpYjNKb2IyOWtQVDEwS1Nrc1lYMHBmWE4wWVhScFl5Qm1aWFJqYUU1bGFXZG9ZbTl5YUc5dlpITW9aU2w3Y21WMGRYSnVJRVJDU0dWc2NHVnlMbVpsZEdOb1VtVnpkR0YxY21GdWRITW9LUzUwYUdWdUtHVTlQbnRqYjI1emRDQjBQV1V1YldGd0tDaDBMSElwUFQ1bFczSmRMbTVsYVdkb1ltOXlhRzl2WkNrN2NtVjBkWEp1SUhRdVptbHNkR1Z5S0NobExISXBQVDUwTG1sdVpHVjRUMllvWlNrOVBYSXBmU2w5YzNSaGRHbGpJR1psZEdOb1EzVnBjMmx1WlhNb0tYdHlaWFIxY200Z1JFSklaV3h3WlhJdVptVjBZMmhTWlhOMFlYVnlZVzUwY3lncExuUm9aVzRvWlQwK2UyTnZibk4wSUhROVpTNXRZWEFvS0hRc2NpazlQbVZiY2wwdVkzVnBjMmx1WlY5MGVYQmxLVHR5WlhSMWNtNGdkQzVtYVd4MFpYSW9LR1VzY2lrOVBuUXVhVzVrWlhoUFppaGxLVDA5Y2lsOUtYMXpkR0YwYVdNZ2RYSnNSbTl5VW1WemRHRjFjbUZ1ZENobEtYdHlaWFIxY201Z0xpOXlaWE4wWVhWeVlXNTBMbWgwYld3L2FXUTlKSHRsTG1sa2ZXQjljM1JoZEdsaklHbHRZV2RsVlhKc1JtOXlVbVZ6ZEdGMWNtRnVkQ2hsS1h0eVpYUjFjbTRnZG05cFpDQXdQVDA5WlM1d2FHOTBiMmR5WVhCb1AyQXZhVzFuTHlSN1pTNXBaSDB1YW5CbllEcGdMMmx0Wnk4a2UyVXVjR2h2ZEc5bmNtRndhSDB1YW5CbllIMXpkR0YwYVdNZ2JXRndUV0Z5YTJWeVJtOXlVbVZ6ZEdGMWNtRnVkQ2hsTEhRcGUyTnZibk4wSUhJOWJtVjNJRXd1YldGeWEyVnlLRnRsTG14aGRHeHVaeTVzWVhRc1pTNXNZWFJzYm1jdWJHNW5YU3g3ZEdsMGJHVTZaUzV1WVcxbExHRnNkRHBsTG01aGJXVXNkWEpzT2tSQ1NHVnNjR1Z5TG5WeWJFWnZjbEpsYzNSaGRYSmhiblFvWlNsOUtUdHlaWFIxY200Z2NpNWhaR1JVYnloMEtTeHlmWE4wWVhScFl5QmhaR1JTWlhacFpYY29aU2w3YkdWMElIUTllMjVoYldVNlhDSmhaR1JTWlhacFpYZGNJaXhrWVhSaE9tVXNiMkpxWldOMFgzUjVjR1U2WENKeVpYWnBaWGRjSW4wN2FXWW9JVzVoZG1sbllYUnZjaTV2Ymt4cGJtVW1KbHdpWVdSa1VtVjJhV1YzWENJOVBUMTBMbTVoYldVcGNtVjBkWEp1SUhadmFXUWdSRUpJWld4d1pYSXVjMlZ1WkVSaGRHRlhhR1Z1VDI1c2FXNWxLSFFwTzJ4bGRDQnlQWHR1WVcxbE9tVXVibUZ0WlN4eVlYUnBibWM2Y0dGeWMyVkpiblFvWlM1eVlYUnBibWNwTEdOdmJXMWxiblJ6T21VdVkyOXRiV1Z1ZEhNc2NtVnpkR0YxY21GdWRGOXBaRHB3WVhKelpVbHVkQ2hsTG5KbGMzUmhkWEpoYm5SZmFXUXBmVHRqYjI1emIyeGxMbXh2WnloY0lsTmxibVJwYm1jZ2NtVjJhV1YzT2lCY0lpeHlLVHQyWVhJZ1lUMTdiV1YwYUc5a09sd2lVRTlUVkZ3aUxHSnZaSGs2U2xOUFRpNXpkSEpwYm1kcFpua29jaWtzYUdWaFpHVnljenB1WlhjZ1NHVmhaR1Z5Y3loN1hDSkRiMjUwWlc1MExWUjVjR1ZjSWpwY0ltRndjR3hwWTJGMGFXOXVMMnB6YjI1Y0luMHBmVHRtWlhSamFDaGNJbWgwZEhBNkx5OXNiMk5oYkdodmMzUTZNVE16Tnk5eVpYWnBaWGR6WENJc1lTa3VkR2hsYmlobFBUNTdZMjl1YzNRZ2REMWxMbWhsWVdSbGNuTXVaMlYwS0Z3aVkyOXVkR1Z1ZEMxMGVYQmxYQ0lwTzNKbGRIVnliaUIwSmlZdE1TRTlQWFF1YVc1a1pYaFBaaWhjSW1Gd2NHeHBZMkYwYVc5dUwycHpiMjVjSWlrL1pTNXFjMjl1S0NrNlhDSkJVRWtnWTJGc2JDQnpkV05qWlhOelpuVnNiRndpZlNrdWRHaGxiaWhsUFQ1N1kyOXVjMjlzWlM1c2IyY29YQ0pHWlhSamFDQnpkV05qWlhOelpuVnNJVndpS1gwcExtTmhkR05vS0dVOVBtTnZibk52YkdVdWJHOW5LRndpWlhKeWIzSTZYQ0lzWlNrcGZYTjBZWFJwWXlCelpXNWtSR0YwWVZkb1pXNVBibXhwYm1Vb1pTbDdZMjl1YzI5c1pTNXNiMmNvWENKUFptWnNhVzVsSUU5Q1Nsd2lMR1VwTEd4dlkyRnNVM1J2Y21GblpTNXpaWFJKZEdWdEtGd2laR0YwWVZ3aUxFcFRUMDR1YzNSeWFXNW5hV1o1S0dVdVpHRjBZU2twTEdOdmJuTnZiR1V1Ykc5bktHQk1iMk5oYkNCVGRHOXlZV2RsT2lBa2UyVXViMkpxWldOMFgzUjVjR1Y5SUhOMGIzSmxaR0FwTEhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpYjI1c2FXNWxYQ0lzZEQwK2UyTnZibk52YkdVdWJHOW5LRndpUW5KdmQzTmxjam9nVDI1c2FXNWxJR0ZuWVdsdUlWd2lLVHRzWlhRZ2NqMUtVMDlPTG5CaGNuTmxLR3h2WTJGc1UzUnZjbUZuWlM1blpYUkpkR1Z0S0Z3aVpHRjBZVndpS1NrN1kyOXVjMjlzWlM1c2IyY29YQ0oxY0dSaGRHbHVaeUJoYm1RZ1kyeGxZVzVwYm1jZ2RXbGNJaWtzV3k0dUxtUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0pCYkd3b1hDSXVjbVYyYVdWM2MxOXZabVpzYVc1bFhDSXBYUzVtYjNKRllXTm9LR1U5UG50bExtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb1hDSnlaWFpwWlhkelgyOW1abXhwYm1WY0lpa3NaUzV4ZFdWeWVWTmxiR1ZqZEc5eUtGd2lMbTltWm14cGJtVmZiR0ZpWld4Y0lpa3VjbVZ0YjNabEtDbDlLU3h1ZFd4c0lUMDljaVltS0dOdmJuTnZiR1V1Ykc5bktISXBMRndpWVdSa1VtVjJhV1YzWENJOVBUMWxMbTVoYldVbUprUkNTR1ZzY0dWeUxtRmtaRkpsZG1sbGR5aGxMbVJoZEdFcExHTnZibk52YkdVdWJHOW5LRndpVEc5allXeFRkR0YwWlRvZ1pHRjBZU0J6Wlc1MElIUnZJR0Z3YVZ3aUtTeHNiMk5oYkZOMGIzSmhaMlV1Y21WdGIzWmxTWFJsYlNoY0ltUmhkR0ZjSWlrc1kyOXVjMjlzWlM1c2IyY29ZRXh2WTJGc0lGTjBiM0poWjJVNklDUjdaUzV2WW1wbFkzUmZkSGx3WlgwZ2NtVnRiM1psWkdBcEtYMHBmWE4wWVhScFl5QmphR0Z1WjJWR1lYWkpZMjl1UTJ4aGMzTW9aU3gwS1h0MFB5aGxMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9YQ0ptWVhadmNtbDBaVjl1YjF3aUtTeGxMbU5zWVhOelRHbHpkQzVoWkdRb1hDSm1ZWFp2Y21sMFpWOTVaWE5jSWlrc1pTNXpaWFJCZEhSeWFXSjFkR1VvWENKaGNtbGhMV3hoWW1Wc1hDSXNYQ0pTWlcxdmRtVWdZWE1nWVNCbVlYWnZjbWwwWlZ3aUtTazZLR1V1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hjSW1aaGRtOXlhWFJsWDNsbGMxd2lLU3hsTG1Oc1lYTnpUR2x6ZEM1aFpHUW9YQ0ptWVhadmNtbDBaVjl1YjF3aUtTeGxMbk5sZEVGMGRISnBZblYwWlNoY0ltRnlhV0V0YkdGaVpXeGNJaXhjSWsxaGNtc2dZWE1nWVNCbVlYWnZjbWwwWlZ3aUtTbDljM1JoZEdsaklIVndaR0YwWlVaaGRtOTFjbWwwWlZOMFlYUjFjeWhsTEhRcGUyWmxkR05vS0dBa2UzUm9hWE11VWtWVFZFRlZVa0ZPVkZOZlZWSk1mU1I3WlgwdlAybHpYMlpoZG05eWFYUmxQU1I3ZEgxZ0xIdHRaWFJvYjJRNlhDSlFWVlJjSW4wcExuUm9aVzRvS0NrOVBudDBhR2x6TG1SaVVISnZiV2x6WlNncExuUm9aVzRvY2owK2UyTnZibk4wSUdFOWNpNTBjbUZ1YzJGamRHbHZiaWhjSW5KbGMzUmhkWEpoYm5SelhDSXNYQ0p5WldGa2QzSnBkR1ZjSWlrdWIySnFaV04wVTNSdmNtVW9YQ0p5WlhOMFlYVnlZVzUwYzF3aUtUdGhMbWRsZENobEtTNTBhR1Z1S0dVOVBudGxMbWx6WDJaaGRtOXlhWFJsUFhRc1lTNXdkWFFvWlNsOUtYMHBmU2w5YzNSaGRHbGpJSE4wYjNKbFNXNUpibVJsZUdWa1JFSW9aU3gwS1h0MGFHbHpMbVJpVUhKdmJXbHpaUzUwYUdWdUtISTlQbnRwWmlnaGNpbHlaWFIxY200N1kyOXVjM1FnWVQxeUxuUnlZVzV6WVdOMGFXOXVLR1VzWENKeVpXRmtkM0pwZEdWY0lpa3ViMkpxWldOMFUzUnZjbVVvWlNrN1FYSnlZWGt1YVhOQmNuSmhlU2gwS1Q5MExtWnZja1ZoWTJnb1pUMCtlMkV1Y0hWMEtHVXBmU2s2WVM1d2RYUW9kQ2w5S1gxemRHRjBhV01nWjJWMFUzUnZjbVZrVDJKcVpXTjBRbmxKWkNobExIUXNjaWw3Y21WMGRYSnVJSFJvYVhNdVpHSlFjbTl0YVhObEtDa3VkR2hsYmloaFBUNTdhV1lvSVdFcGNtVjBkWEp1TzNKbGRIVnliaUJoTG5SeVlXNXpZV04wYVc5dUtHVXBMbTlpYW1WamRGTjBiM0psS0dVcExtbHVaR1Y0S0hRcExtZGxkRUZzYkNoeUtYMHBmWE4wWVhScFl5Qm1aWFJqYUZKbGRtbGxkM05DZVZKbGMzUkpaQ2hsS1h0eVpYUjFjbTRnWm1WMFkyZ29ZQ1I3UkVKSVpXeHdaWEl1UkVGVVFVSkJVMFZmVlZKTWZYSmxkbWxsZDNNdlAzSmxjM1JoZFhKaGJuUmZhV1E5Skh0bGZXQXBMblJvWlc0b1pUMCtaUzVxYzI5dUtDa3BMblJvWlc0b1pUMCtLSFJvYVhNdVpHSlFjbTl0YVhObEtDa3VkR2hsYmloMFBUNTdhV1lvSVhRcGNtVjBkWEp1TzJOdmJuTjBJSEk5ZEM1MGNtRnVjMkZqZEdsdmJpaGNJbkpsZG1sbGQzTmNJaXhjSW5KbFlXUjNjbWwwWlZ3aUtTNXZZbXBsWTNSVGRHOXlaU2hjSW5KbGRtbGxkM05jSWlrN1FYSnlZWGt1YVhOQmNuSmhlU2hsS1Q5bExtWnZja1ZoWTJnb1pUMCtlM0l1Y0hWMEtHVXBmU2s2Y2k1d2RYUW9aU2w5S1N4UWNtOXRhWE5sTG5KbGMyOXNkbVVvWlNrcEtTNWpZWFJqYUNoMFBUNUVRa2hsYkhCbGNpNW5aWFJUZEc5eVpXUlBZbXBsWTNSQ2VVbGtLRndpY21WMmFXVjNjMXdpTEZ3aWNtVnpkR0YxY21GdWRGd2lMR1VwTG5Sb1pXNG9aVDArVUhKdmJXbHpaUzV5WlhOdmJIWmxLR1VwS1NsOWZWeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8yTm9ZWEp6WlhROWRYUm1PRHRpWVhObE5qUXNaWGxLTWxwWVNucGhWemwxU1dwdmVreERTbnBpTTFaNVdUSldla2xxY0dKSmJWSnBZVWRXYzJOSFZubE1iVEZ3WW1rMWNXTjVTbVJNUTBwMVdWY3hiR041U1RaWGVVcEZVV3RvYkdKSVFteGphVWx6U1d0U1FsWkZSa05SVms1R1dERldVMVJEU1hOSmJFcEdWVEZTUWxaV1NrSlViRkpVV0RGV1UxUkRTWE5KYmxKdllWaE5hVXhEU21KaU1rcHhXbGRPTUVsRk9XbGhiVlpxWkVZd2FVeERTbkJhUjBscFRFTktkbU5IVm5WSmFYZHBaRmhDYm1OdFJtdGFWVkpwU1dsM2FXSXllR3RXYlZaNVl6SnNkbUpwU1hOSmJVNTVXbGRHTUZwVk9XbGhiVlpxWkVaT01HSXpTbXhKYVhkcFlUSldOVlZIUmpCaFEwbHpTVzFPZVZwWFJqQmFWV3gxV2tkV05FbHBkMmxhUjBwUlkyMDVkR0ZZVG14SmFYZHBaRWRvYkdKcFNYTkpiVkpwU1dsM2FXUklTbWhpYms1b1dUTlNjR0l5TkdsTVEwcDJXVzF3YkZrelVsUmtSemw1V2xOSmMwbHRaR3hrUlVaellrTkpjMGx1U214ak0xSm9aRmhLYUdKdVVucEphWGRwWWtkV2RWb3pVbTlKYVhkcFZVaEtkbUpYYkhwYVUwbHpTVzVLYkdNeU9YTmtiVlZwVEVOS2JWcFlVbXBoUlVaMVdrVk9hRmt5YUd4VmJWWjZaRWRHTVdOdFJuVmtTRTFwVEVOS2JWcFlVbXBoUTBselNXNUtiR016UW5aaWJrNXNTV2wzYVdGdVRuWmlhVWx6U1c1U05FbHBkMmxqYlZaNlpFZEdNV050Um5Wa1JrNHdZak5LYkVscGQybGFiVGw1VWxkR2FtRkRTWE5KYmtwc1l6TlNhR1JZU21oaWJsRnBURU5LZDJSWVVXbE1RMHBxWWpJeGQySkhWakJhVTBselNXMXNhMGxwZDJsYWJWWXdXVEpvVTFwWVRqQlpXRlo1V1ZjMU1HTjVTWE5KYlZwd1ltMVJhVXhEU25sSmFYZHBXVE5XY0dNeWJIVmFVMGx6U1cxYWNHSklVbXhqYVVselNXMU9NV0ZZVG5CaWJWWm1aRWhzZDFwVFNYTkpiVFZzWVZka2IxbHRPWGxoUnpsMldrTkpjMGx1U214ak0xWnpaRWhOYVV4RFNtcFpWM2h6V1cxR2FtRjVTWE5KYlRWc1lWZGtiMWx0T1hsaFJ6bDJXa2hOYVV4RFNuUlpXRUZwVEVOS01rbHBkMmxoVTBselNXMXNkVnBIVmpSVU1sbHBURU5LYW1SWGJIcGhWelZzWTNsSmMwbHVWblZhUjFadFlWYzFiRnBEU1hOSmJrSnZZak5TZGxvelNtaGpSMmRwVEVOS2RGbFlTbkphV0VscFRFTktUVWxwZDJsaVIwWXdZa2MxYmtscGQybGlSMFl3U1dsM2FXSkhOVzVKYVhkcFpFZHNNR0pIVldsTVEwcDFXVmN4YkVscGQybFpWM2d3U1dsM2FXUllTbk5KYVhkcFpGaEtjMUp0T1hsVmJWWjZaRWRHTVdOdFJuVmtRMGx6U1cxR2ExcEdVblpKYVhkcFkyMVdNbUZYVmpOSmFYZHBZakphYldKSGJIVmFWamwyV1cxdmFVeERTbXRaV0ZKb1NXbDNhV0l5U25GYVYwNHdXRE5TTldOSFZXbE1RMHAxV1ZoYWNGb3lSakJpTTBscFRFTktkbUpyZUhCaWJWVnBURU5LZWxwWE5XdFNSMFl3V1Zaa2IxcFhOVkJpYlhod1ltMVZhVXhEU25sYVdGcHdXbGhrVkZwWE5XdEphWGRwWTIxR01HRlhOVzVKYVhkcFkwZEdlV015VmtwaWJsRnBURU5LYW1JeU1YUmFWelV3WTNsSmMwbHVTbXhqTTFKb1pGaEthR0p1VW1aaFYxRnBURU5LYW1JeU5YcGlNbmhzU1dsM2FXSkhPVzVKYVhkcFdtMVdNRmt5YUdaaU0wSXdZVmM1ZFdONVNYTkpiVEZzWkVkb2RscERTWE5KYlVwMldraHJhVXhEU2t0Vk1EbFBTV2wzYVdNelVubGhWelZ1WVZkYU5VbHBkMmxoUjFab1drZFdlV041U1hOSmEyaHNXVmRTYkdOdVRXbE1RMHBFWWpJMU1GcFhOVEJNVmxJMVkwZFZhVXhEU21waU1qVXdXbGMxTUZaSWJIZGFVMGx6U1cxa2JHUkRTWE5KYlU1b1pFZE9iMGxwZDJsYVdFcDVZak5KYVV4RFNuTmlNazVvWWtaT01HSXpTbWhhTWxWcFRFTktlbHBZVWtwa1IxWjBTV2wzYVdReWJIVmFSemt6U1dsM2FWbFhVbXRTV0Zwc1ltNVNUV0ZZVGpCYVZ6VnNZMmxKYzBsdFZqSmFWelV3U1dsM2FXTkhSbmxqTWxWcFRFTktibHBZVWtwa1IxWjBTV2wzYVZwSE9XcGtWekZzWW01UmFVeERTbmhrVjFaNVpWWk9iR0pIVm1wa1J6bDVVVmQ0YzBscGQybGFWM2RwVEVOS2FtSkhSbnBqTUhod1l6TlJhVXhEU25sYVZ6RjJaRzFWYVV4RFNuaGtWMVo1WlZaT2JHSkhWbXBrUnpsNVNXbDNhVmxYVW10VmJWWXlZVmRXTTBscGQybGpiVlowWWpOYWJGTllVbXhpVTBselNXMWFhR1JwU1hOSmJVWnJXa05KYzBsdVRteGtSVVl3WkVoS2NGbHVWakJhVTBselNXNUtiR016VW1oa1dFcG9ZbTVTU2xwRFNYTkpiV3g2VW0xR01tSXpWbmxoV0ZKc1NXbDNhV050Vm5wa1IwWXhZMjFHZFdSSVRsUmtSemw1V2xOSmMwbHRiSHBZTWxwb1pHMDVlV0ZZVW14SmFYZHBaRWRHYVdKSFZXbE1RMHAyV1cxd2JGa3pVbnBKYVhkcFl6TlNkbU50VldsTVEwcENZMjVLYUdWVFNYTkpiV3g2VVZoS2VWbFlhMmxNUTBwMldXMXdiRmt6VVdsTVEwcHdXa2huYVV4RFNuQmliVkpzWlVOSmMwbHVTbXhrYld4c1pETk5hVXhEU201YVdGSlVaRWM1ZVZwWFVsQlpiWEJzV1ROU1EyVlZiR3RKYVhkcFl6TlNkbU50Vm10VmJWWXlZVmRXTTJONVNtUk1RMHAwV1ZoQ2QyRlhOVzVqZVVrMlNXdEdRbEl3UlhOVVZVWkNWRlZGYzFVd1JrNVRhMDF6VFVWS1FsSlZWWE5VVlVaQ1ZIbDROVkZyUmtoV1JVMXpUbXRLUWxFd1ZYTlZNRVpDVmxWTmMxTXdSa0pUTUZselRXdEtRbE5YY0VOU2VYaDBVV3RHUkZKVGVGQlJWVVpRVVhsNFNsRlZSa3BSZVhoTVVWVkdURXhGZEVKUlZUQnpVbFZHUWxKNWVGUlJWVVpXVVhsNFNGRlZUbkZSZVhoUVVWVkdVbEZUZUVaUlZVWldVWGw0V2xGVlRtOVJhWGhNVVZWR1RFeEZWa0pSTUdoRlRFVldRbEZXVmtaTVIzUkRVVlZHY2xGcGVHcFJWVVpzVEVWT1FsRXpjRVJSZVhoU1VWVkdWRXhGT1VKU1YwbHpVekJHUWxONWVFWlJWVTV5VVd0bmMxSlZSa0pXVlZWellUQktRbEZYZEVOTVJsWkNVVlpqYzFFd1JrUk5WVkpFVEVaR1FsRldUWE5VTUVaR1VsVk5jMWRWUmtKWFUzaG9VVlZHYWt4SE9VTlJWWE4yVVRGQmMwMUZTa0pSTUZWelZEQkdRbFF3VVhOVE1FWkNVekZOYzFkVlJrUldSVTF6VXpCR1FsTXdUWE5UVlVaSVUybDRVRkZWV2xoUlUzaEdVVlZHU0ZGNWVGcFJWVVphVEVkV1FsRXdUa1JNUm14Q1VWWnJjMXBWUmtSaFJVcEVURVprUWxKWWFFTlRhWGhNVVZWR1RGTjVlRWhSVlU0eFVXbDRTbEZWUmpKUmEwVnpVbFZHUWxkVlRYTlVNRVpFVlVWTmMxVlZSa0pWVlUxelZWVkdRbFZWWjNOU01FWkdZVVZLYlV4RmRFSlJWWFIwVVdsM01GRnJSa3hqUlVwelVXbDRjbEV3UmtSU1UzaFFVVlZHVUdKVlNYTlVWVVpDVkZoYVEweEdUa0pSVms1R1RFZHNRMUZWVG5WUmJHTnpVekJHUWxNeFkzTlNNRVpDVjFWRmMxSlZSa0pWTUUxelZWVkdSRTFWU21GTVJYUkNVVlYwVEV4RlpFSlJNR1J0VEVWMFFsRlZkRlJNUm14Q1VURlNSRXhGZEVKUlZYUkVURVZzUWxFd2IzTlVWVVpDVkZacmMxSlZSa0pUTVc5elVsVkdRbEl3VFhOWFZVWkNWMU40YWxGVlJteE1SMFpDVVRJMVJGZFRlRVpSVlVaeVVXdFJjMUpWUmtKU01WbHpWMVZHUWxkVGVHeFJWV1F5VVhsNFVGRlZXa0pTVTNoR1VWVkdXbFpUZUZKUlZVWlNVWGw0U0ZGVlJtcFNhWGhHVVZWR2JsRnJZM05UVlVaQ1UxVlJjMU5WUmtaTU1FNUpURVZXUWxGVlpFeE1SazVDVVRGQ2MxRnBlRXhSVlVaTVRFVnNRbEZWTVZCTVJrWkNVVlpHUkV4R1JrSlJWa1pKVEVVNVFsVllhRVJhUTNkNVVXdEdRazFyU1RCUmFYaElVVlZPTmxGcGVGQlJWVVpRWVVWTmMxVXdSa0pWTW14RVRFY3hRMUZWVG1salJVbHpVekJHUWxNd2MzTlNNRVpDV2xWRmMxSlZSa0pYVjJSRFRFVjBRbEZWZEVSTVJXUkNVVlYwUWt4RlZrSlJWVlpKVEVWMFFsRlZPVUpNUld4Q1ZGaG9SVTVWU1hOYU1FNUNVVmRrUkZvd1RYTlNNRVpFVDFWSmMxUXdSa0pVTTBKRVRFWk9RbEZXVG5CUmVYaDBVV3RHUkZsdVFrTk1SWFJDVVZWMFRFeEZaRUpSVjFaQ1RFVldRbEZXYkhSUmFYaFFVVlZHVUZKcGVFaFJWVVpNVVZONFJsRlZSa1pTZVhoc1VWVkdjRkZyV1hOVFZVWk9ZMFZXYjFGNWVIaFJNRVpDWTFWT2RGRjVlRWhSVlU1MVVYbDRVRkZWUmxCa2EwMXpWVEJHUWxVeWJFUk1SekZEVVZWT2FXTkZTWE5UTUVaQ1V6QnpjMUl3UmtKYVZVVnpVbFZHUWxkWE1VTk1SVGxDVVZVNVIweEZaRUpSVlhSQ1RFVldRbEZWVmtwTVIxWkNVVmRzUTFGVGVFcFJWVEYzVWxjMVJFeERkRVJSVlVWeVVUSmtSRXhGVmtKUlZrNUlURVZrUWxFelVrVk1SVGxDVVZVNU1sRjVlRlJSVlVaVVlWVk5jMkpWU2tKUk1rcDNVV2w0VEZGVlJreFRlWGhLVVZWT1MweEZiRUpSVld4NlVXbDRSbEZWUmxaa1JVbHpVbFZHVUZwRGVFNVJWVFZ1VVdsNFVsRlZSbUZoTUVselUxVkdSRkpyYTNOU1ZVWkNWbFZGYzFKVlJrSlZWV2R6VkRCR1FsUXdXWE5TTUVaQ1V6QkZjMUpWUmtKU1ZXTnpXVEJHUWxvd1NrZE1SV3hDVWxSa1EweEdSa0pSVjNCRFVubDRTbEZWVGtkUmVYaEdVVlZHVmxGVGVFWlJWVVpTVTBONFVGRlZSbEJTYVhoSVVWVkdURkZUZUVaUlZVWkdVMU40YWxGVlJtNVJhMFZ6VTFWR1JrMHdUa1JNUld4Q1ZESktkMUY1ZDNkUmEwWkNUVVZLZUZGNWVFaFJWVlkwVVdsNFVGRlZSbEJsYTAxelZUQkdRbFV5YkVSTVJ6RkRVVlZPYVdORlNYTlRNRVpDVXpCemMxTlZSa1pUYVhoT1VWVkdUbVF3U1hOU1ZVWkNXakJLTkZGcGVFWlJWVVphWlZWSmMxTlZSa0pUVTNoRVVWVkdSRkY1ZUVaUlZVWklVWGw0U2xGVlJrNU5NRWx6VWxWR1FsZFVTa05NUldSQ1VWVmtUMHhIVGtKU2VUbEZURVU1UWxKRVVrTlNlWGhHVVZWR2FsUkRlRkJSVlVaUVRFVk9RbEZWVGxCTVJWWkNVVlZrUkV4RmJFSlJWVEZKVEVWV1FsRlhUa3BNUmtaQ1VWWkdSMHhGYkVKUlZURkVURVYwUWxWVVpFZGxhMDF6WkZWS1FsSlZWWE5VTUVaQ1ZEQnZjMVV3UmtKVk1teEVURWN4UTFGVlRtbGpSVWx6VXpCR1FsTXdjM05UVlVaR1UybDRUbEZWUms1T2EwbHpVbFZHUWxaNlpFTk1SVlpDVVZac05WRnBlRXBSVlVaS1RFVk9RbEZWVGtSTVJWWkNVVlZrUkV4RmJFSlJWVEI2VVdsNFJsRlZSbHBOYTBselVqQkdRbEl4UVhOWk1FWklUVlZSYzFRd1JrVmtWVXBVVEVWV1FsRldUbGRNUlRsQ1VWVTRjMUV3UmtKUk1EaHpVbFZHUWxJd1RYTlRWVVpDVkZWVmMxSlZSa0pWTUZGelZWVkdRbFZWV1hOVFZVWkNWRlZOYzFNd1JsQlBWVlkyVVhsNE0xRnJSa0prTUVvMVVXbDRTRkZWVGpCUmFYYzBVV3RHUWxvd1RrSk1SVlpDVVZaa1NFeEZkRUpVVkdSRVRsVkpjMDVyU2tKUlZGcERaVlZKYzFJd1JrUk5NRWx6VjFWR1FrOUZTblJSYVhoS1VWVkZlRkZ0TlVOTVJWWkNVVlprZGxGcGVIUlJhMFpFVWpOQ1EweEZWa0pSVjFWellWVktRbEpYY0VOUlUzaEdVVlZHV0dJd1NYTmhWVXBDVkZSa1EwNHdUWE5QUlVwQ1VWUm9RMlZWU1hOU1ZVWkNWMWROYzFJd1JrWmxSVTF6VkZWR1FsUlZPSE5TVlVaQ1ZYbDRTbEZWUmtwUmVYaEdVVlZHUmxKRGVGQlJWVVpRVEVWT1FsRlZUbmxSYVhoR1VWVkdXR1JWU1hOVU1FWkNWREJOYzFOVlJrSlRNMmhEVEVWV1FsRldaREZSYVhoUVVWVkdVRkpUZUV4UlZVWk9URVZPUWxGNlJrWlJlWGhPVVZWR1VFMVZTWE5TVlVaQ1ZucEtRMHhGZEVKUk1uaERVWGw0U2xGVlJreE9WVWx6VWxWR1FsWjZTa05NUlhSQ1VUSm9RMUpUZUVwUlZVWk1UVlZSYzFVd1JrSlZla3BGVEVkc1ExRlZSbkJSYW14RFRFVjBRbEl5Y0VSTVJUbENVa1ZHZUZGcGVFWlJWVVpRVmxONFRsRlZSazVoYTBselVqQkdSRlJyT0hOU1ZVWklWa1JzUkV4SGJFTlJWVVp3VVc1c1JVeEZaRUpSTWxselUxVkdRbE5WVFhOU1ZVWkNXWGw0UkZGVlRtOVJhelJ6VXpCR1FsUlRlRnBSVlU1UFZIbDRURkZWUms1U2FYaEdVVlZPVDFKNWVGcFJWVVpvVEVaV1FsSXlXWE5UVlVaQ1V6Qk5jMVpWUmtKV1ZVMXpWVlZHUWxvd1RYTlpNRVpDWTJ0S1MweEZWa0pSVm14UFRFVjBRbEpZUWtSTVJteENVa1ZHTkZKRGVGUlJWVVpVWWxWVmMySlZTa0pSVnpGRFZFTjRTRkZWWXpWUmFYaEtVVlZHU2xSVGVFWlJWVVpvVEVWT1FsRXlXbUZNUlhSQ1VWWkdURXhGVmtKUlZUbE5URVYwUWxFeVdtaE1SVGxDVVZaV1JFeEdUa0pSVms1VlRFVldRbEZWT1ZKTVJrWkNVWHBHUTFKVGVGUlJWVVphVm1sNFJsRlZSbEJXVTNoVVVWVk9kVkZyVFhOWk1FWkNZVlZLUjB4R1RrSlJWazVWVEVWV1FsRlZPVmhNUjJSRFVWVldkVkV3VFhOVlZVWkNWVlZOYzFOVlJrSlRVM2gwVVd0R1FtSXdTazlNUldSQ1VUSm9SRXhGYkVKUlZXeFFURVZXUWxGWFpFTk1SVTVDVVRKNFExRjVlRkJSVlVaU1RFVTVRbEV4U2tSTVJYUkNVVlV4UkV4RmRFSlJWWFJFVEVaV1FsRldWbGxNUldSQ1VUTktRMWRUZUZKUlZVWlVURVZzUWxGVmJFUk1Sa1pDVVZaRmMxRXdSa1JpYTBwRVRFZFdRbEZYWkVOTVNFNURVVlZrZDFGcVRrVk1SVEZDVVZVd2Mxb3dUa0pSVjJ4RVlqQlJjMUl3UmtKYVZHeEZURVYwUWxGVk1WaE1SV3hDVVROb1JVeEZNVUpSVlRCNVVrTjRSbEZWUm1wTk1GRnpVbFZHUWxVelpFVk1Sa1pDVVZaR1NreEZiRUpSVld0eldqQktRbEV6Y0VSTVJUbENVVlZzUlV4RmJFSlJWRkpGVEVWc1FsRlVaRVJSVTNoR1VWVkdXbU5yVFhOVlZVWkNWVk40ZGxGclJrUlBWVW93VVdsNFJsRlZSbFJSZVhoUVVWVldWVXhJYkVOUlZXUlhWMmw0VEZGVlJrNWhNRkZ6VTFWR1JGUkdWWE5WVlVaQ1ZWVk5jMU5WUmtKVFUzZ3hVV3RHUmxsc1kzTlVWVVpDVkZWTmMxSXdSa0pWTWtselZWVkdRbFZWVFhOVFZVWkNVMU40VkZGVlJsWlhVM2hLVVZWamVGRXllRWRNUkVKRFVWVkZkMUZxUWtWTVJXUkNVVE5vUTFaNWVGSlJWVVpTVVhsNFNsRlZSa3BNUjA1Q1VWZFdZVXhGWkVKUmVrNURaVlZKYzFsVlJrSlpWVTF6VlZWR1FsVlRlRkJSVlVaU1ZtbDRURkZWUmt4UmVYaFdVVlZHVm1GclNYTlNWVVpDVjFWTmMxUXdSa1JsUlZKV1RFWkdRbEZXUmtSTVNFNURVVlZHZWxGc2IzTlNWVVpDVjFWVmMyTXdTa0pSZWtaRVpWVkpjMVF3UmtKVU1FMXpZVlZLUWxGWGJFTk1SazVDVVZaa1JFeEZiRUpSTW5CRVlrVkpjMVZWUmtKVlZVMXpVMVZHUWxOVGQzZFJhMFpFVjJsNFNsRlZSa3BYUTNoR1VWVkdVRnBUZUV4UlZVWk1XWGw0VGxGVlJrNVVRM2hvVVZWR2FGUlRlRkpSVlVaU1RFWk9RbEY2VGtSalJVbHpWVlZHUWxWVlRYTlRWVVpDVTFOM01GRnJSa1JYYVhoS1VWVkdTbUl3U1hOVk1FWkNWVEJOYzJGVlNrSlJWMnhEVEVoR1ExRlZUVE5SYlRWR1RFWkdRbEZXUm5aU1UzaEtVVlZPVVZGVGVFWlJWVVpJVVhsNFZsRlZSbFpSZVhoUVVWVkdVRXhITVVOUlZVNTNVV3RaYzFKVlJrSlNNR056V1RCR1FsbDVlSEpSYTBaQ1lUQktSVXhHWkVKU1dHaERURVU1UWxGV1VuVlJlWGhLVVZWT1IxWlRlRkpSVlVaU1VYbDRTbEZWUmtwWFEzaElVVlZPYUV4SFRrSlJXRXBEVWtONFJsRlZSbHBVYVhoT1VWVk9hMlZGVVhOVk1FWkNWVEk1U0V4R1ZrSlJWbFl3VVhsNFJsRlZSbHBSZVhoT1VWVmtjVkV4VlhOVlZVWkNWVlZOYzFOVlJrSlRVM2h1VVRCR1JsZHRSWE5aVlVaQ1dWZE5jMVl3UmtKV2VYaFNVVlZPTkZGcVZrTk1Sa1pDVVZaR1JFeElUa05SVlVaNlVXeHZjMUpWUmtKWFZWVnpUVVZLUWxOWGFFVk9WVkZ6VFVWS1FsRlVRa05PUlZselVsVkdRbE5WTUhOU01FWkVaR3RLUWt4RlpFSlVWV2hQVEVWV1FsRlZaRVJNUmxaQ1VWWldSRXhGT1VKUlZUaHpXbFZHUkdORlNrZE1SVlpDVVZWa1JFeEdWa0pSVmxaT1RFVnNRbEZWYTNOYU1FcENVVEp3UTFWRGVFWlJWVVpJVlZONGFGRlZSbWhNUjBaQ1VWZE5jMDFGU2tKVlJHeERWV2w0UmxGVlJraFJlWGhXVVZWR1ZsRjVlRkJSVlVaUVRFZGtRMUZWVG5kUmExbHpVbFZHUWxJd1RYTldWVVpDVmxVd2MxTlZSa0pUVTNoc1VWVk9jVkZzUVhOU1ZVWkNVakZGYzFsVlJrSlpVM2hvVVZWR2FreElWa05SVmxaelVUTkNTRXhFV2tOUlZVVXlVVzVHU0V4RlZrSlJWMDVFVEVWa1FsRXpjRVJpYTFselZUQkdRbFV6UWtOTVJYUkNVVlYwUlV4SGRFTlJWVVp5VVc1V1NFeEhkRU5SVlVVeVVXdE5jMU5WUmtKYVUzaEVVVlZPTkZKVWJFTk1SVGxDVVZaRmMxVlZSa1pXUXpsRlRFVjBRbEZWYzNOVE1FWkVVMnhaYzFNd1JrSlRNVTF6VjFWR1JGSnJUWE5UTUVaQ1V6Qk5jMU5WUmtSVGFYaE9VVlZPVGs1cldYTlNWVVpGVTNwa1IweEZWa0pSVldSRVRFWnNRbEZXYTNOWk1FWkNXbE40YUZGVlRtbFJlWGhhVVZWR1dreEhWa0pSTTJoRVRXdFpjMUpWUmtKaFZVb3lVV2w0U2xGVlJrcGpWVWx6VWpCR1JHSkZTVEZTYVhoTVVWVkdURm93U1hOVFZVWkVVMnRGYzFKVlJrSldlWFJHVEVac1FsRlhUa2RNUlZaQ1VUTndRMUY1ZUVaUlZVWndVV3BrUmt4RmJFSlJWV3hGVEVaT1FsZFhOVVJsYTBselpEQktRbEZZWkVObFZXTnpVbFZHUWxRd1RYTlNNRVpFVGpCSmVsSjVlRXhSVlVaTVZYbDRWbEZWUmxaUmVYaE1VVlZHVEZGNWVFcFJWVTV6VVdsNFNsRlZSa3hSVTNoR1VWVkdTa3hGT1VKU01WRnpWRlZHUWxSWGJFaE1SVlpDVWtWa2NWSjVlRVpSVlVaSVVYbDRXbEZWUmxwUFJWbHpVbFZHUWxSNWVHaFJWVTVyVGpCWmMxZFZSa0pYVkZwSFRFVmtRbEV6Y0VOU2VYaE9VVlZHVGxGNWVGSlJWVVpTVTBONFNGRlZUbTlSYTBWelVsVkdRbFZYZUVkTVJrWkNVVlpHZWxKcGVFcFJWVTVyVTBONFJsRlZSazVoYTFselUxVkdRbE5YT1VkTVJYUkNVakZ3U1V4RlZrSlJWVEZ4VW1sNFNsRlZSa3BhTUZselV6QkdUR0ZGU1hoU2VYZDVVV3RHUWsxclNqVlNlWGhHVVZWR1VGUlRlRVpSVlVaTVltdFpjMUl3UmtSamEwMXpWREJHUWxSNlpFTk1SWFJDVVZWMFZFeEdiRUpSTVZKRVRFVjBRbEZWZEVSTVJXeENVVEJ2YzFOVlJrSlRNRVZ6VWxWR1FsTlRlRkJSVld4VlRFVTVRbEp0VGtKTVJWWkNVVlZrUkV4R2JFSlJWbXMwVW1sNFNGRlZSbEJPTUZselYxVkdRbGRVV2tkTVJXUkNVWHBHUTFSNWVFNVJWVVpPVWtONFNGRlZUbWxpUldOelZEQkdRbFF5VlhOVE1FWktUbFZKTVZGcGR6QlJhMFpDVGtWSk1GRnBlRWhSVlUxNFVXbDRVRkZWUmxCV1EzaFVVVlZHVkdSclNYTlZNRVpDVlRCTmMyTXdUa0pSV0U1RVN6QkpjMU13UmtST1ZWSjFVV2w0VEZGVlJreFdlWGhJVVZWR1dsRlRlRVpSVlVaVVVYbDRVbEZWVFhoUmJHOXpVekJHUWxNelpFaE1SV3hDVVRCd2MxTkRlRXhSVlVaTVZYbDRXbEZWVGtkUmVYaE1VVlZHVEZGNWVFcFJWVTVMVEVWc1FsRlZkRUpNUlZaQ1VWVnJjMVF3UmtoV1EzaE9VVlZHVG1GVlkzTlNWVVpGVWpKd1NFeEZWa0pSVldSRVRFWnNRbEZXYTNOV1ZVWkNWbmw0YUZGVlRuTlJhMDF6VjFWR1FsZFRlRmhSVlU0MlVXMWtTRXhGTVVKUlZURkVURVpHUWxGV1JrcE1SV1JDVVRKb1ExRlRlRVpSVlVaU1pXdFpjMVZWUmtKVlYyeEVURVZzUWxFeVVuSlNRM2hHVVZWR1RtRnJXWE5UVlVaQ1UxTjBRMHhGZEVKU01YQnlVa040UmxGVlJrNWhhMWx6VTFWR1FsTllWa2RNUlhSQ1UxWlNjVko1ZUZKUlZVWlNVWGw0VWxGVlJsSmFNR056VXpCR1JtVkZTbTlSZVhoT1VWVkdUbEY1ZUVoUlZVNUdaRVZaYzFVd1JrSlZNMDVKVEVjNVExRlZSblpSYVhoV1VWVkdXRXhIUmtKUlYwNHdVbWw0U0ZGVlRYaFNSelZEVEVWMFFsRlZNSGRTZVhoSVVWVk9SbUpyWTNOVlZVWkNWVlZOYzFWVlJrSlZWM1JJU1dsM2FWcHRiSE5hVTBrMlNXMVNhV0ZIVm5OalIxWjVURzB4Y0dKcE5YRmplVWx6U1c1T2RtUllTbXBhV0U1RVlqSTFNRnBYTlRCSmFuQmlTVzFPYzFsWVRucEpSVkpEVTBkV2MyTkhWbmxsTTA0d1dWaFNjRmw1UW01YVdGRm5Va1ZHVlZGVlNrSlZNRlptVmxaS1RVdERiRGRqYlZZd1pGaEtkVmhEU205a1NGSjNUMms0ZG1KSE9XcFpWM2h2WWpOT01FOXFSWHBOZW1OMldFTktPV016VW1oa1IyeHFTVWRrYkdSRFFsTlNWazVWVVZaV1UxRlZOVlZWTVRsV1ZXdDNiMHRZZEhsYVdGSXhZMjAxWjBwSWREQmhSMng2VEd0U1FsWkZSa05SVms1R1dERldVMVJJTVhsYVdFNHdXVmhXZVZsWE5UQmplVGxuWmxoT01GbFlVbkJaZVVKcldXeENlV0l5TVhCak1sVnZTMWgwZVZwWVVqRmpiVFJuWVZkU2FVeHRPWGRhVnpSdldFTkthMWxzZDJsTVJFbHpXbTVXZFZrelVuQmlNalJ2V2xOc04yTXpaSEJrUjA1dlMwZFZkV0l5ZUd0V2JWWjVZekpzZG1KcGJEZFpNa1o2V2xOQmQwOXRWWFZaTTBwc1dWaFNiRlF5U25GYVYwNHdWVE5TZG1OdFZXOVlRMHA1V2xoT01GbFlWbmxaVnpVd1l6RjNhVXhJZEhKYVdHeFJXVmhTYjA5c2QybGhWMUpqU1c0d2NFOHlUbWhqTWxWblRWUndiRXh0VG5sYVYwWXdXbFU1YVdGdFZtcGtSazR3WWpOS2JFdEdkMmxqYlZZeVlWZFdNMk14ZDJsTVNIUnlXbGhzVVZsWVVtOVBiSGRwWVZkU1kwbHVNSEJNYlU1NVdsZEdNRnBWYkhWYVIxWTBTMFozYVdOdFZucGtSMFl4WTIxR2RXUkdkMmxNUm5kcFkyMVdlbVJIUmpGamJVWjFaRVk1Y0ZwR2QybExXREU1UzFneGVtUkhSakJoVjAxbldtMVdNRmt5YUZOYVdFNHdXVmhXZVZsWE5UQmplV2R3WlROS2JHUklWbmxpYVVJd1lVZHNla3h0VW1sVlNFcDJZbGRzZWxwVFozQk1ibEp2V2xjMGIxcFVNQ3RsTTBwc1pFaFdlV0pwUW14TWJsSjVXVmMxZWxsWFRqQmhWemwxUzBaM2FXTnRWbnBrUjBZeFkyMUdkV1JJVG1OSmFXdDFZakpLY1ZwWFRqQlZNMUoyWTIxVmIxaERTbmxhV0U0d1dWaFdlVmxYTlRCak1YZHBTMU0xYmxwWVVrSmlSM2R2UzFnd2NFeHVVbTlhVnpSdldsUXdLMDFEUlRsUVYxVjFZa2RXZFZvelVtOVFNVUo1WWpJeGNHTXlWWFZqYlZaNllqSjRNbHBUYUd4TFZIQXdZVWRzZWt4dFdteGtSMDV2VVZjMWExRXlSbXBoUjFaVFdsaE9NRmxZVm5sWlZ6VXdZM2xuY0V0WU1YcGtSMFl3WVZkTloxcHRWakJaTW1oQ1ltMVNSRmxYVG05YVZrcHNZek5TYUdSWVNtaGlibEo2UzBOc04yTnRWakJrV0VwMVNVZGFiR1JIVG05TFJWSkRVMGRXYzJOSFZubE1iRXBHVlRGU1FsWldTa0pVYkZKVVdERldVMVJEYTNWa1IyaHNZbWxvYkZCVU5XeE1iWEI2WWpJMGIwdFRhM1ZrUjJoc1ltbG9iRkJVTlRCaFIyeDZURzFTYVZWSVNuWmlWMng2V2xObmNFeHVVbTlhVnpSdlpFUXdLMlV5VG5aaWJrNHdTVWhKT1dSRE5UQmpiVVoxWXpKR2FtUkhiSFppYVdoalNXNUtiR016VW1oa1dFcG9ZbTVTZWxoRFNYTllRMHA1V2xkR2EyUXpTbkJrUjFaalNXbHJjMWxVTVhsTWJUbHBZVzFXYW1SR1RqQmlNMHBzUzBaM2FXTnRWbnBrUjBZeFkyMUdkV1JJVG1OSmFXczNZMjFXTUdSWVNuVkpSMVYxV20wNWVWSlhSbXBoUTJoc1VGUTFhRXh1UWpGa1EyaHNTMU5yYzJOcE5XcGlNakYzWWtkV01GcFROVEJoUjFaMVMwTm5jRkJVTlZGamJUbDBZVmhPYkV4dVNteGpNamx6WkcxVmIxcFRhM0JtVTJ0d1psaE9NRmxZVW5CWmVVSnRXbGhTYW1GR1NteGpNMUpvWkZoS2FHSnVVa05sVld4clMwZFZjR1V6U214a1NGWjVZbWxDUlZGcmFHeGlTRUpzWTJrMWJWcFlVbXBoUmtwc1l6TlNhR1JZU21oaWJsSjZTME5yZFdSSGFHeGlhV2d3VUZRMU1FeHRXbkJpYlZGdlpFUXdLMlJETlhCYVJEQTVVRmRWY0V0WU1YcGtSMFl3WVZkTloxcHRWakJaTW1oVFdsaE9NRmxZVm5sWlZ6VXdVVzVzUkdSWGJIcGhWelZzUzBkVmNHVXpTbXhrU0ZaNVltbENSVkZyYUd4aVNFSnNZMmsxYlZwWVVtcGhSa3BzWXpOU2FHUllTbWhpYmxKNlMwTnJkV1JIYUd4aWFXZ3dVRlExTUV4dFduQmlTRkpzWTJsb01GQlVOVEJNYlU0eFlWaE9jR0p0Vm1aa1NHeDNXbFF3T1ZCWFZYQkxXREY2WkVkR01HRlhUV2RhYlZZd1dUSm9VMXBZVGpCWldGWjVXVmMxTUZGdWJFOWFWMnh1WVVkS2RtTnRhSFppTWxGdldsTnNOMk50VmpCa1dFcDFTVVZTUTFOSFZuTmpSMVo1VEcxYWJHUkhUbTlWYlZaNlpFZEdNV050Um5Wa1NFMXZTMU0xTUdGSFZuVkxTRkU1VUc1UmRWcHRiSE5rUjFaNVMwaFJPVkJ1VVhWaWJWWndXakpvYVdJelNtOWlNamxyVUZRd09WcFRhM0JtV0U0d1dWaFNjRmw1UW0xYVdGSnFZVVpLYkdNelVtaGtXRXBvWW01U1EyVlZUakZoV0U1d1ltMVdRbUp0VWs5YVYyeHVZVWRLZG1OdGFIWmlNbEZ2V2xONE1FdFlkSGxhV0ZJeFkyMDBaMUpGU2tsYVYzaDNXbGhKZFZwdFZqQlpNbWhUV2xoT01GbFlWbmxaVnpVd1kzbG5jRXh1VW05YVZ6UnZZMm93SzJVeWVHeGtRMEpvVUZoSk4yTnRWakJrV0VwMVdFTkthR0pIZUdOSmFVVTVVRmRWYlVwcGFHaFFWMFYxV20xc2MyUkhWbmxMU0ZFNVVHNVJkVmt6Vm5Cak1teDFXbFk1TUdWWVFteFFWREZzUzFOcmMxaERTbWhpUjNoalNXbEZPVkJZVVcxS2FXaG9VRmRGZFZwdGJITmtSMVo1UzBkVk9WQnRWWFZpYlZad1dqSm9hV0l6U205aU1qbHJVRlF4TUV0VGEzTlpXREJ3WmxoT01GbFlVbkJaZVVKdFdsaFNhbUZGTld4aFYyUnZXVzA1ZVdGSE9YWmFTRTF2V2xOc04yTnRWakJrV0VwMVNVVlNRMU5IVm5OalIxWjVURzFhYkdSSFRtOVZiVlo2WkVkR01XTnRSblZrU0UxdlMxTTFNR0ZIVm5WTFIxVTVVRzUwYW1JeU5YcGtRMEl3VUZkVmRXSlhSbmRMUTJnd1RFaEpjRkJVTld4WE0wcGtURzAxYkdGWFpHOVpiVGw1WVVjNWRscERhemRqYlZZd1pGaEtkVWxJVVhWYWJXeHpaRWRXZVV0RGFHeE1TRWx3VUZRMU1FeHRiSFZhUjFZMFZESlpiMXBUYXpsUVdFbHdabE5zT1dNelVtaGtSMnhxU1VkYWJHUkhUbTlSTTFad1l6SnNkVnBZVFc5TFdIUjVXbGhTTVdOdE5HZFNSVXBKV2xkNGQxcFlTWFZhYlZZd1dUSm9VMXBZVGpCWldGWjVXVmMxTUdONVozQk1ibEp2V2xjMGIxcFVNQ3RsTWs1MlltNU9NRWxJVVRsYVV6VjBXVmhCYjB0SVVYTmphV3M1VUcxV1ltTnNNSFZaTTFad1l6SnNkVnBXT1RCbFdFSnNTMVIwZVZwWVVqRmpiVFJuWkVNMWJXRlhlREJhV0VsdlMwZFZjMk5wYXpsUWJsRjFZVmMxYTFwWWFGQmFhV2hzUzFRd09XTnBiRGxMV0RGNlpFZEdNR0ZYVFdka1dFcHpVbTA1ZVZWdFZucGtSMFl4WTIxR2RXUkRhR3hMV0hSNVdsaFNNV050TldkTWFUbDVXbGhPTUZsWVZubFpWelV3VEcxb01HSlhkeTloVjFFNVNraDBiRXh0Ykd0bVYwSTVZek5TYUdSSGJHcEpSMngwV1Zka2JGWllTbk5TYlRsNVZXMVdlbVJIUmpGamJVWjFaRU5vYkV0WWRIbGFXRkl4WTIwMFoyUnRPWEJhUTBGM1VGUXdPVnBUTlhkaFJ6a3dZakprZVZsWVFtOVFNa0YyWVZjeGJreDVVamRhVXpWd1drZ3dkV0Z1UW01WlJIQm5UREpzZEZwNU9HdGxNbFYxWTBkb2RtUkhPVzVqYlVaM1lVZ3dkV0Z1UW01WlNERjZaRWRHTUdGWFRXZGlWMFozVkZkR2VXRXlWbmxTYlRsNVZXMVdlbVJIUmpGamJVWjFaRU5vYkV4SVVYQmxNazUyWW01T01FbElTVGxpYlZZelNVVjNkV0pYUm5saE1sWjVTMFowYkV4dGVHaGtSM2gxV25rMWMxbFlVWE5hVXpWeldWaFNjMkp0WTNWaVJ6VnVXRk40TjJSSGJEQmlSMVUyV2xNMWRWbFhNV3hNUjBaelpFUndiRXh0TldoaVYxVnpaRmhLYzA5clVrTlRSMVp6WTBkV2VVeHVWbmxpUlZwMlkyeEtiR016VW1oa1dFcG9ZbTVSYjFwVGJEbExWSFI1V2xoU01XTnROR2RqYVRWb1drZFNWV0o1YURCTFUzaDVabGhPTUZsWVVuQlplVUpvV2tkU1UxcFlXbkJhV0dOdldsTnNOMkpIVmpCSlNGRTVaVEkxYUdKWFZUWllRMHBvV2tkU1UxcFlXbkJhV0dSalNXbDRhMWxZVW1oUGJWVnpZakpLY1ZwWFRqQllNMUkxWTBkVk5saERTbmxhV0Zwd1dsaGtZMGx1TURkaFYxbHZTVmMxYUdSdGJHNVpXRkoyWTJrMWRtSnJlSEJpYlZWdFNteDNhVmxYVW10VmJWWXlZVmRXTTFoRFNUbFFWREV3VEcwMWFHSlhWWEJqYlZZd1pGaEtkVWxJV25aaFYxRm5Va1ZLU1ZwWGVIZGFXRWwxWXpKV2RWcEZVbWhrUjBaWVlVZFdkVlF5TlhOaFZ6VnNTMGhSY0U4eWVHeGtRMEo1VUZoMGRWbFhNV3hQYlZWMVltMUdkRnBUZUhsWldGSndZbTFqTm1OSFJubGpNbFpLWW01UmIxcFROWGxaV0ZKd1ltMWpjRXhIVG5aaVZ6RnNZbTVTZWs5dFZYVlpNamwwWWxkV2RXUklUWE5qYlZaNlpFZEdNV050Um5Wa1JqbHdXa1J3ZDFsWVNucGFWV3gxWkVOb2JFeHVTbXhqTTFKb1pGaEthR0p1VW1aaFYxRndabFIwYW1JeU5YcGlNbmhzVEcxNGRscDVhR05KYkU1c1ltMVNjR0p0WTJkamJWWXlZVmRXTTA5cFFtTkphWGg1UzFSME1sbFlTV2RaVkRFM1lsZFdNR0ZIT1d0UGJIZHBWVVU1VkZaR2QybE1SMHAyV2tock5sTnNUbEJVYVRWNlpFaEtjR0p0WkhCYWJtdHZZMmxyYzJGSFZtaGFSMVo1WTNwd2RWcFlZMmRUUjFab1drZFdlV041YURkWVEwcEVZakkxTUZwWE5UQk1WbEkxWTBkV1kwbHFjR05KYlVaM1kwZDRjRmt5UmpCaFZ6bDFUREp3ZW1JeU5XTkpiakJ3WmxSMGJWcFlVbXBoUTJoalNXMW9NR1JJUVRaTWVUbHpZakpPYUdKSGFIWmpNMUUyVFZSTmVrNTVPWGxhV0Zwd1dsaGtlbGhEU1hOWlUydDFaRWRvYkdKcGFHeFFWRFUzV1RJNWRXTXpVV2RrUkRGc1RHMW9iRmxYVW14amJrMTFXakpXTUV0R2QybFpNamwxWkVkV2RXUkRNVEJsV0VKc1dFTkpjRTh6U214a1NGWjVZbWxDTUVwcFdYUk5VMFU1VUZoUmRXRlhOV3RhV0doUVdtbG9ZMGx0Um5kalIzaHdXVEpHTUdGWE9YVk1NbkI2WWpJMVkwbHBheTlhVXpWeFl6STVkVXREYXpaWVEwcENWVVZyWjFreVJuTmlRMEo2WkZkT2FscFlUbnBhYmxaellrWjNhV1pUYTNWa1IyaHNZbWxvYkZCVU5UZFpNamwxWXpJNWMxcFROWE5pTW1OdldFTktSMXBZVW1waFEwSjZaRmRPYWxwWVRucGFibFp6U1ZaM2FVdFlNSEJNYlU1b1pFZE9iMHRIVlRsUWJVNTJZbTVPZG1KSFZYVmlSemx1UzBaM2FWcFlTbmxpTTBrMldFTkpjMXBUYTNCbVdFNHdXVmhTY0ZsNVFucGFWelZyVWtkR01GbFdaRzlhVnpWUVltMTRjR0p0Vlc5YVUydzNXVEk1ZFdNeU9YTmFVelZ6WWpKamIxaERTbEJhYlZwellWYzFiRWxGT1VOVGJIZHBURWRWY0V4SGVIWlpNa1p6VlROU2RtTnRSbTVhVXpWNldsaFNTbVJIVm5STFJuZHBXa2RHTUZsV2QybE1SWEJVVkRBMGRXTXpVbmxoVnpWdVlWZGFOVXRIVlhWYVIwWXdXVk5yY0V4SFRuWmliazUyWWtkVmRXSkhPVzVMUjBKTllqSk9hR0pEUWxSa1J6bDVXVmRrYkU5cFFXdGxNbFYxWWpKS2NWcFhUakJZTTFJMVkwZFdPVWxJVGpCaU0wcHNXa2RCY0V4SVpIQmliVkoyWkhrMWFGcEhVa1prYlZaMVpFVjRjR016VW14aWJWWjVTMFozYVdJeU5YTmhWelZzV0VOSmMyUkVNQ3RsTWs1MlltNU9kbUpIVlhWaVJ6bHVTMFozYVZGdVNuWmtNMDVzWTJwdloxUXlOWE5oVnpWc1NVZEdibGxYYkhWSlZuZHBTMVIwYzFwWVVXZGphakZMVlRBNVQweHVRbWhqYms1c1MwZDRkbGt5Um5OVk0xSjJZMjFHYmxwVE5XNWFXRkpLWkVkV2RFdEdkMmxhUjBZd1dWWjNhVXRUYXpkWk1qbDFZekk1YzFwVE5YTmlNbU52V0VOS01XTkhVbWhrUjJ4MVdubENhR0p0VVdkWk1uaHNXVmMxY0dKdFkyZGtWMnhqU1dscmMxZDVOSFZNYlZKMldUTldkRnBYTlRCTWJrWXhXbGhLTlZVeVZuTmFWMDR3WWpOS1FtSkhkMjlZUTBsMVkyMVdNbUZYVmpOak1UbDJXbTFhYzJGWE5XeFlRMGx3V0ZNMWJXSXpTa1paVjA1dlMwZFZPVkJ1ZEd4TWJVNXpXVmhPZWxSSGJIcGtRelY1V2xjeGRtUnRWVzlZUTBwNVdsaGFjRnBZWkhwWU1qbHRXbTE0Y0dKdFZtTkphV3R6V2xNMWVHUlhWbmxsVms1c1lrZFdhbVJIT1hsTFJuZHBURzA1YlZwdGVIQmliVlptWWtkR2FWcFhlR05KYVd0MVkyMVdkR0l6V214TFEydzVTMU40ZFdSWGVITkpWREE1WTJsWmJVdEhUblppYms1MllrZFZkV0pIT1c1TFNFbHdURVozYVZsWFVtdFZiVll5WVZkV00xaERTVGxRVkRGc1RHMDFhR0pYVlcxS2ExSkRVMGRXYzJOSFZubE1iVVpyV2taS2JHUnRiR3hrZVdoc1RHMVNhR1JIUlhCTVIwNTJZbTVPZG1KSFZYVmlSemx1UzBaM2FWUkhPV3BaVjNoVVpFZEdNRnBVYjJkYVIwWXdXVk5DZWxwWE5UQkpTRkoyU1VkR2QyRldkMmxMVTNoellqSk9hR0pHVGpCaU0wcG9XakpWZFdOdFZuUmlNMXBzVTFoU2JHSlRhR05KYlZKb1pFZEdZMGxwYTNOWk1qbDFZekk1YzFwVE5YTmlNbU52V1VWNGRsa3lSbk5KUms0d1lqTkthRm95VlRaSlExSTNXbE0xZGxsdGNHeFpNMUptWkVoc2QxcFlNR2RqYlZaMFlqTmFiRnBIUVhCTFdEQndabGhPTUZsWVVuQlplVUpxWVVkR2RWb3lWa2RaV0ZwS1dUSTVkVkV5ZUdoak0wMXZXbE40TUV0WWREQlFlV2hzVEcxT2MxbFlUbnBVUjJ4NlpFTTFlVnBYTVhaa2JWVnZXRU5LYlZsWVduWmpiV3d3V2xZNWRXSXhkMmxMVTNoc1RHMU9jMWxZVG5wVVIyeDZaRU0xYUZwSFVXOVlRMHB0V1ZoYWRtTnRiREJhVmprMVdsaE9ZMGxwYTNOYVV6VjZXbGhTUW1SSVVubGhWMG94WkVkVmIxaERTbWhqYld4b1RGZDRhRmx0Vm5OWVEwbHpXRU5LVTFwWE1YWmtiVlZuV1ZoTloxbFRRbTFaV0ZwMlkyMXNNRnBXZDJsTFUyczJTMGRWZFZreWVHaGpNMDVOWVZoT01FeHVTbXhpVnpreVdsTm9ZMGx0V21oa2JUbDVZVmhTYkZnemJHeGpNWGRwUzFONGJFeHRUbk5aV0U1NlZFZHNlbVJETldoYVIxRnZXRU5LYlZsWVduWmpiV3d3V2xZNWRXSXhkMmxMVTNoc1RHNU9iR1JGUmpCa1NFcHdXVzVXTUZwVGFHTkpiVVo1WVZkRmRHSkhSbWxhVjNoalNXbDRZMGxyTVdoamJYTm5XVmhOWjFsVFFtMVpXRnAyWTIxc01GcFdkMmxMVTJ3NVl6TlNhR1JIYkdwSlNGWjNXa2RHTUZwVldtaGtiVGt4WTIxc01GcFdUakJaV0ZJeFkzbG9iRXhJVVhCbE1scHNaRWRPYjB0SFFXdGxNMUp2WVZoTmRWVnJWbFJXUlVaV1ZXdEdUMVpHVG1aV1ZrcE5abE5TTjFwWU1IWlFNbXg2V0RKYWFHUnRPWGxoV0ZKc1VGTlNOMlJJTVdkTVNIUjBXbGhTYjJJeVVUWllRMHBSVmxaU1kwbHVNSEJNYmxKdldsYzBiMHREYXpsUWJuUXdZVWRzZWt4dFVtbFZTRXAyWWxkc2VscFRaM0JNYmxKdldsYzBiMk5xTUN0bE1rNTJZbTVPTUVsSFJUbGphVFV3WTIxR2RXTXlSbXBrUjJ4MlltbG9ZMGx1U214ak0xSm9aRmhLYUdKdVVucFlRMGx6V0VOS2VWcFhSbXRrTTBwd1pFZFdZMGxwYTNWaU1rcHhXbGRPTUZVelVuWmpiVlZ2V0VOS2VWcFlUakJaV0ZaNVdWYzFNR014ZDJsTFZIUm9URzFrYkdSRGFHeExVelV3WVVkV2RVdEhWVGxRYm5Sc1RHMXNlbGd5V21oa2JUbDVZVmhTYkZCWVVYTlpVelYzWkZoUmIxcFRiRGxMV0RCd1psTnNPV016VW1oa1IyeHFTVWhPTUdJelNteFRWelZLWW0xU2JHVkhWbXRTUlVsdldsTjRNRXRZZERCaFIyeDZURzFTYVZWSVNuWmlWMng2V2xNMU1HRkhWblZMU0VrNVVHNTBjRnBwWjJoamFXeDVXbGhTTVdOdE5EZFpNamwxWXpOUloxbFVNWGxNYmxKNVdWYzFlbGxYVGpCaFZ6bDFTMGRWYzFoRFNubGFWMFpyWkROS2NHUkhWbU5KYVd0MVlqSktjVnBYVGpCVk0xSjJZMjFWYjFwVGF6ZFJXRXA1V1ZocmRXRllUa0pqYmtwb1pWTm9NRXRVT1RCTWJWcDJZMnRXYUZreVoyOWFWREFyWlRKRmRXTklWakJMUjFWd1psTnJObGxUTlhka1dGRnZaRU5zT1V0WU1YcGtSMFl3WVZkTloxb3lWakJWTTFKMlkyMVdhMVF5U25GYVYwNHdVVzVzU2xwRGFHeE1TRkZ6WTJsc04yTnRWakJrV0VwMVNVaFNiMkZZVFhWYVIwcFJZMjA1ZEdGWVRteExRMnQxWkVkb2JHSnBhR2hRVkRVM1lWZFpiMGxYUlhCamJWWXdaRmhLZFU4elNteGtTRlo1WW1sQ2FFeHVVbmxaVnpWNldWZE9NR0ZYT1hWTFIxVndURzA1YVdGdFZtcGtSazR3WWpOS2JFdEhWWEJNYld4MVdrZFdORXRJVVhCTWJXUnNaRVZHYzJKRGFIbExXREJ3WmxoT01GbFlVbkJaZVVKdFdsaFNhbUZHU214a2JXeHNaRE5PUTJWV1NteGpNMUpLV2tOb2JFdFlkSGxhV0ZJeFkyMDBaMXB0VmpCWk1tZHZXVU5TTjFKRlNrbGFWM2gzV2xoSmRWSkZSbFZSVlVwQ1ZUQldabFpXU2sxbVdFcHNaRzFzYkdRelRYWlFNMHBzWXpOU2FHUllTbWhpYmxKbVlWZFJPVXBJZEd4bVYwRndURzVTYjFwWE5HOWFWREFyV2xNMWNXTXlPWFZMUTJ0d1RHNVNiMXBYTkc5YVZEQXJTMGhTYjJGWVRYVmFSMHBSWTIwNWRHRllUbXhMUTJ0MVpFZG9iR0pwYURCUVZEVTNZVmRaYjBsWVVYQmpiVll3WkZoS2RVOHlUblppYms0d1NVaEpPV1JETlRCamJVWjFZekpHYW1SSGJIWmlhV2hqU1c1S2JHUnRiR3hrTTA1alNXbDRZMGx1U214WlYxSXpZMjFzTUZwV2QybExVelYyV1cxd2JGa3pVbFJrUnpsNVdsTm9ZMGx1U214a2JXeHNaRE5PWTBscGF6ZFJXRXA1V1ZocmRXRllUa0pqYmtwb1pWTm9iRXRVT1d4TWJWcDJZMnRXYUZreVoyOWFWREFyWlROSmRXTklWakJMUjFWd1psTnJObU5wTlhka1dGRnZXbE5zT1V0VGVGRmpiVGwwWVZoT2JFeHVTbXhqTWpselpHMVZiMXBUYTNCTFV6VnFXVmhTYW1GRGFEQlFWRFZGVVd0b2JHSklRbXhqYVRWdVdsaFNWR1JIT1hsYVYxSlFXVzF3YkZrelVrTmxWV3hyUzBaM2FXTnRWakpoVjFZell6RjNhVXhHZDJsamJWWjZaRWRHTVdOdFJuVmtSbmRwVEVkVmNFeHVVbTlhVnpSdldsUXdLMVZJU25aaVYyeDZXbE0xZVZwWVRuWmlTRnBzUzBkVmNFdFRiRGxtVTBwa1psRTlQVnh1SWwxOVxuIl19
