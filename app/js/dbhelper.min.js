class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static get RESTAURANTS_URL(){return`${this.DATABASE_URL}restaurants/`}static dbPromise(){return idb.open("db",2,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"});case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant","restaurant_id")}})}static fetchRestaurants(){return this.dbPromise().then(e=>{return e.transaction("restaurants").objectStore("restaurants").getAll()}).then(e=>0!==e.length?Promise.resolve(e):this.fetchAndCacheRestaurants())}static fetchAndCacheRestaurants(){return fetch(DBHelper.RESTAURANTS_URL).then(e=>e.json()).then(e=>this.dbPromise().then(t=>{const r=t.transaction("restaurants","readwrite"),a=r.objectStore("restaurants");return e.forEach(e=>a.put(e)),r.complete.then(()=>Promise.resolve(e))}))}static fetchRestaurantById(e){return DBHelper.fetchRestaurants().then(t=>t.find(t=>t.id===e))}static fetchRestaurantByCuisine(e){return DBHelper.fetchRestaurants().then(t=>t.filter(t=>t.cuisine_type===e))}static fetchRestaurantByNeighborhood(e){return DBHelper.fetchRestaurants().then(t=>t.filter(t=>t.neighborhood===e))}static fetchRestaurantByCuisineAndNeighborhood(e,t){return DBHelper.fetchRestaurants().then(r=>{let a=r;return"all"!==e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!==t&&(a=a.filter(e=>e.neighborhood==t)),a})}static fetchNeighborhoods(e){return DBHelper.fetchRestaurants().then(e=>{const t=e.map((t,r)=>e[r].neighborhood);return t.filter((e,r)=>t.indexOf(e)==r)})}static fetchCuisines(){return DBHelper.fetchRestaurants().then(e=>{const t=e.map((t,r)=>e[r].cuisine_type);return t.filter((e,r)=>t.indexOf(e)==r)})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return void 0===e.photograph?`/img/${e.id}.jpg`:`/img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return r.addTo(t),r}static addReview(e){let t={name:"addReview",data:e,object_type:"review"};if(!navigator.onLine&&"addReview"===t.name)return void DBHelper.sendDataWhenOnline(t);let r={name:e.name,rating:parseInt(e.rating),comments:e.comments,restaurant_id:parseInt(e.restaurant_id)};console.log("Sending review: ",r);var a={method:"POST",body:JSON.stringify(r),headers:new Headers({"Content-Type":"application/json"})};fetch("http://localhost:1337/reviews",a).then(e=>{const t=e.headers.get("content-type");return t&&-1!==t.indexOf("application/json")?e.json():"API call successfull"}).then(e=>{console.log("Fetch successful!")}).catch(e=>console.log("error:",e))}static sendDataWhenOnline(e){console.log("Offline OBJ",e),localStorage.setItem("data",JSON.stringify(e.data)),console.log(`Local Storage: ${e.object_type} stored`),window.addEventListener("online",t=>{console.log("Browser: Online again!");let r=JSON.parse(localStorage.getItem("data"));console.log("updating and cleaning ui"),[...document.querySelectorAll(".reviews_offline")].forEach(e=>{e.classList.remove("reviews_offline"),e.querySelector(".offline_label").remove()}),null!==r&&(console.log(r),"addReview"===e.name&&DBHelper.addReview(e.data),console.log("LocalState: data sent to api"),localStorage.removeItem("data"),console.log(`Local Storage: ${e.object_type} removed`))})}static changeFavIconClass(e,t){t?(e.classList.remove("favorite_no"),e.classList.add("favorite_yes"),e.setAttribute("aria-label","Remove as a favorite")):(e.classList.remove("favorite_yes"),e.classList.add("favorite_no"),e.setAttribute("aria-label","Mark as a favorite"))}static updateFavouriteStatus(e,t){fetch(`${this.RESTAURANTS_URL}${e}/?is_favorite=${t}`,{method:"PUT"}).then(()=>{this.dbPromise().then(r=>{const a=r.transaction("restaurants","readwrite").objectStore("restaurants");a.get(e).then(e=>{e.is_favorite=t,a.put(e)})})})}static storeInIndexedDB(e,t){this.dbPromise.then(r=>{if(!r)return;const a=r.transaction(e,"readwrite").objectStore(e);Array.isArray(t)?t.forEach(e=>{a.put(e)}):a.put(t)})}static getStoredObjectById(e,t,r){return this.dbPromise().then(a=>{if(!a)return;return a.transaction(e).objectStore(e).index(t).getAll(r)})}static fetchReviewsByRestId(e){return fetch(`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${e}`).then(e=>e.json()).then(e=>(this.dbPromise().then(t=>{if(!t)return;const r=t.transaction("reviews","readwrite").objectStore("reviews");Array.isArray(e)?e.forEach(e=>{r.put(e)}):r.put(e)}),Promise.resolve(e))).catch(t=>DBHelper.getStoredObjectById("reviews","restaurant",e).then(e=>Promise.resolve(e)))}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
